&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка периода по умолчанию - текущий месяц
	НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецПериода = КонецДня(КонецМесяца(ТекущаяДата()));
	
	// Инициализация данных при открытии
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Установка заголовка формы
	Заголовок = СтрШаблон("Дашборд KPI за период с %1 по %2", 
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), 
		Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНоменклатурыПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыРасшифровка

&НаКлиенте
Процедура ГрафикПродажиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "Продажи");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТопТоваровОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "ТопТоваров");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТопКонтрагентовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "ТопКонтрагентов");
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПрибыльностьОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "Прибыльность");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПрибыльныеТоварыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "ПрибыльныеТовары");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУбыточныеТоварыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "УбыточныеТовары");
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВзаиморасчетыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "Взаиморасчеты");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТопДебиторовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "ТопДебиторов");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПросроченнаяЗадолженностьОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "ПросроченнаяЗадолженность");
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЗапасыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "Запасы");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТопТоваровПоОстаткамОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "ТопТоваровПоОстаткам");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНизкаяОборачиваемостьОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуОтчета(Расшифровка, "НизкаяОборачиваемость");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСПрошлымПериодом(Команда)
	СравнитьСПрошлымПериодомНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВExcel(Команда)
	ЭкспортДанныхВExcel();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДанныеНаСервереАсинхронно()
	
	Состояние("Обновление данных...");
	ПодключитьОбработчикОжидания("ОбновитьДанныеНаСервереОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеНаСервереОтложенно()
	
	ОбновитьДанныеНаСервере();
	Состояние();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	// Обновление данных продаж
	ОбновитьДанныеПродаж();
	
	// Обновление данных прибыльности
	ОбновитьДанныеПрибыльности();
	
	// Обновление данных взаиморасчетов
	ОбновитьДанныеВзаиморасчетов();
	
	// Обновление данных запасов
	ОбновитьДанныеЗапасов();
	
	// Обновление заголовка формы
	Заголовок = СтрШаблон("Дашборд KPI за период с %1 по %2", 
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), 
		Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСДаннымиПродажи

&НаСервере
Процедура ОбновитьДанныеПродаж()
	
	// Получение схемы компоновки данных
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Продажи");
	
	// Обновление основного графика продаж
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "Основной");
	
	// Получение итоговых значений и обновление индикаторов
	ОбновитьИндикаторыПродаж(РезультатКомпоновки);
	
	// Вывод графика
	РезультатПродажи = РезультатКомпоновки.ТабличныйДокумент;
	
	// Обновление таблиц топ товаров и контрагентов
	ОбновитьТаблицуТопТоваров();
	ОбновитьТаблицуТопКонтрагентов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыПродаж(РезультатКомпоновки)
	
	// Получение итоговых значений из результата компоновки
	ИтоговыеЗначения = ПолучитьИтогиИзРезультатаКомпоновки(РезультатКомпоновки, 
		"Выручка, КоличествоПродаж, СреднийЧек");
	
	// Обновление индикаторов на форме
	УстановитьЗначениеИндикатора("ИндикаторВыручка", ИтоговыеЗначения.Выручка, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторКоличествоПродаж", ИтоговыеЗначения.КоличествоПродаж, "ЧЦ=10; ЧДЦ=0; ЧРГ=' '");
	
	// Расчет среднего чека
	СреднийЧек = ?(ИтоговыеЗначения.КоличествоПродаж > 0, 
		ИтоговыеЗначения.Выручка / ИтоговыеЗначения.КоличествоПродаж, 0);
	УстановитьЗначениеИндикатора("ИндикаторСреднийЧек", СреднийЧек, "ЧДЦ=2; ЧРГ=' '");
	
	// Установка цвета индикаторов
	УстановитьЦветИндикатора("ИндикаторВыручка", ИтоговыеЗначения.Выручка > 0);
	
	// Получение рентабельности из СКД для отображения на вкладке продаж
	ОбновитьИндикаторРентабельностиПродаж();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторРентабельностиПродаж()
	
	// Получение схемы компоновки данных прибыльности
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Прибыльность");
	
	// Выполнение компоновки только для получения рентабельности
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "РасчетРентабельности");
	
	// Получение итоговых значений
	ИтоговыеЗначения = ПолучитьИтогиИзРезультатаКомпоновки(РезультатКомпоновки, "РентабельностьПродаж");
	
	УстановитьЗначениеИндикатора("ИндикаторРентабельность", ИтоговыеЗначения.РентабельностьПродаж, "ЧДЦ=2", "%");
	
	// Цветовая индикация
	Если ИтоговыеЗначения.РентабельностьПродаж >= 20 Тогда
		Элементы.ИндикаторРентабельность.ЦветТекста = Новый Цвет(0, 128, 0);
	ИначеЕсли ИтоговыеЗначения.РентабельностьПродаж >= 10 Тогда
		Элементы.ИндикаторРентабельность.ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы.ИндикаторРентабельность.ЦветТекста = Новый Цвет(255, 0, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуТопТоваров()
	
	РезультатКомпоновки = ВыполнитьКомпоновкуДанныхДляТаблицы("СКД_Продажи", "ТопТоваровПоВыручке");
	Элементы.ТаблицаТопТоваров.Вывести(РезультатКомпоновки.ТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуТопКонтрагентов()
	
	РезультатКомпоновки = ВыполнитьКомпоновкуДанныхДляТаблицы("СКД_Продажи", "ТопКонтрагентовПоВыручке");
	Элементы.ТаблицаТопКонтрагентов.Вывести(РезультатКомпоновки.ТабличныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДаннымиПрибыльность

&НаСервере
Процедура ОбновитьДанныеПрибыльности()
	
	// Получение схемы компоновки данных
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Прибыльность");
	
	// Выполнение компоновки
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "Основной");
	
	// Обновление индикаторов прибыльности
	ОбновитьИндикаторыПрибыльности(РезультатКомпоновки);
	
	РезультатПрибыльность = РезультатКомпоновки.ТабличныйДокумент;
	
	// Обновление таблиц прибыльных и убыточных товаров
	ОбновитьТаблицуПрибыльныхТоваров();
	ОбновитьТаблицуУбыточныхТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыПрибыльности(РезультатКомпоновки)
	
	// Получение итоговых значений из результата компоновки
	ИтоговыеЗначения = ПолучитьИтогиИзРезультатаКомпоновки(РезультатКомпоновки, 
		"Выручка, Себестоимость, ВаловаяПрибыль, РентабельностьПродаж");
	
	// Обновление индикаторов на форме
	УстановитьЗначениеИндикатора("ИндикаторВаловаяПрибыль", ИтоговыеЗначения.ВаловаяПрибыль, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторРентабельностьПрибыльность", ИтоговыеЗначения.РентабельностьПродаж, "ЧДЦ=2", "%");
	
	// Цветовая индикация
	УстановитьЦветИндикатора("ИндикаторВаловаяПрибыль", ИтоговыеЗначения.ВаловаяПрибыль > 0);
	
	Если ИтоговыеЗначения.РентабельностьПродаж >= 20 Тогда
		Элементы.ИндикаторРентабельностьПрибыльность.ЦветТекста = Новый Цвет(0, 128, 0);
	ИначеЕсли ИтоговыеЗначения.РентабельностьПродаж >= 10 Тогда
		Элементы.ИндикаторРентабельностьПрибыльность.ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы.ИндикаторРентабельностьПрибыльность.ЦветТекста = Новый Цвет(255, 0, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПрибыльныхТоваров()
	
	РезультатКомпоновки = ВыполнитьКомпоновкуДанныхДляТаблицы("СКД_Прибыльность", "ТопПрибыльныхТоваров");
	Элементы.ТаблицаПрибыльныеТовары.Вывести(РезультатКомпоновки.ТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуУбыточныхТоваров()
	
	РезультатКомпоновки = ВыполнитьКомпоновкуДанныхДляТаблицы("СКД_Прибыльность", "ТопУбыточныхТоваров");
	Элементы.ТаблицаУбыточныеТовары.Вывести(РезультатКомпоновки.ТабличныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДаннымиВзаиморасчеты

&НаСервере
Процедура ОбновитьДанныеВзаиморасчетов()
	
	// Получение схемы компоновки данных
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Взаиморасчеты");
	
	// Выполнение компоновки
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "Основной");
	
	// Обновление индикаторов взаиморасчетов
	ОбновитьИндикаторыВзаиморасчетов(РезультатКомпоновки);
	
	РезультатВзаиморасчеты = РезультатКомпоновки.ТабличныйДокумент;
	
	// Обновление таблиц
	ОбновитьТаблицуТопДебиторов();
	ОбновитьТаблицуПросроченнойЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыВзаиморасчетов(РезультатКомпоновки)
	
	// Получение итоговых значений из результата компоновки
	ИтоговыеЗначения = ПолучитьИтогиИзРезультатаКомпоновки(РезультатКомпоновки, 
		"ДебиторскаяЗадолженность, ПросроченнаяДебиторскаяЗадолженность, ДоляПросроченнойЗадолженности, DSO");
	
	// Обновление индикаторов на форме
	УстановитьЗначениеИндикатора("ИндикаторДебиторская", ИтоговыеЗначения.ДебиторскаяЗадолженность, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторПросроченная", ИтоговыеЗначения.ПросроченнаяДебиторскаяЗадолженность, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторДоляПросроченной", ИтоговыеЗначения.ДоляПросроченнойЗадолженности, "ЧДЦ=2", "%");
	УстановитьЗначениеИндикатора("ИндикаторDSO", ИтоговыеЗначения.DSO, "ЧДЦ=0");
	
	// Цветовая индикация
	Если ИтоговыеЗначения.ДоляПросроченнойЗадолженности > 20 Тогда
		Элементы.ИндикаторДоляПросроченной.ЦветТекста = Новый Цвет(255, 0, 0);
	ИначеЕсли ИтоговыеЗначения.ДоляПросроченнойЗадолженности > 10 Тогда
		Элементы.ИндикаторДоляПросроченной.ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы.ИндикаторДоляПросроченной.ЦветТекста = Новый Цвет(0, 128, 0);
	КонецЕсли;
	
	Если ИтоговыеЗначения.DSO > 45 Тогда
		Элементы.ИндикаторDSO.ЦветТекста = Новый Цвет(255, 0, 0);
	ИначеЕсли ИтоговыеЗначения.DSO > 30 Тогда
		Элементы.ИндикаторDSO.ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы.ИндикаторDSO.ЦветТекста = Новый Цвет(0, 128, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуТопДебиторов()
	
	РезультатКомпоновки = ВыполнитьКомпоновкуДанныхДляТаблицы("СКД_Взаиморасчеты", "ТопДебиторов");
	Элементы.ТаблицаТопДебиторов.Вывести(РезультатКомпоновки.ТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПросроченнойЗадолженности()
	
	РезультатКомпоновки = ВыполнитьКомпоновкуДанныхДляТаблицы("СКД_Взаиморасчеты", "ПросроченнаяДебиторскаяЗадолженность");
	Элементы.ТаблицаПросроченнаяЗадолженность.Вывести(РезультатКомпоновки.ТабличныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДаннымиЗапасы

&НаСервере
Процедура ОбновитьДанныеЗапасов()
	
	// Получение схемы компоновки данных
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Запасы");
	
	// Выполнение компоновки
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "Основной");
	
	// Обновление индикаторов запасов
	ОбновитьИндикаторыЗапасов(РезультатКомпоновки);
	
	РезультатЗапасы = РезультатКомпоновки.ТабличныйДокумент;
	
	// Обновление таблиц
	ОбновитьТаблицуТопТоваровПоОстаткам();
	ОбновитьТаблицуНизкойОборачиваемости();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыЗапасов(РезультатКомпоновки)
	
	// Получение итоговых значений из результата компоновки
	ИтоговыеЗначения = ПолучитьИтогиИзРезультатаКомпоновки(РезультатКомпоновки, 
		"СтоимостьОстаток, ОборачиваемостьЗапасов, ДнейЗапаса, КоэффициентВыполненияЗаказов, ПроцентОтсутствияТоваров");
	
	// Обновление индикаторов на форме
	УстановитьЗначениеИндикатора("ИндикаторСтоимостьЗапасов", ИтоговыеЗначения.СтоимостьОстаток, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторОборачиваемость", ИтоговыеЗначения.ОборачиваемостьЗапасов, "ЧДЦ=2");
	УстановитьЗначениеИндикатора("ИндикаторДнейЗапаса", ИтоговыеЗначения.ДнейЗапаса, "ЧДЦ=0");
	УстановитьЗначениеИндикатора("ИндикаторВыполнениеЗаказов", ИтоговыеЗначения.КоэффициентВыполненияЗаказов, "ЧДЦ=2", "%");
	УстановитьЗначениеИндикатора("ИндикаторОтсутствиеТоваров", ИтоговыеЗначения.ПроцентОтсутствияТоваров, "ЧДЦ=2", "%");
	
	// Цветовая индикация
	Если ИтоговыеЗначения.ОборачиваемостьЗапасов < 4 Тогда
		Элементы.ИндикаторОборачиваемость.ЦветТекста = Новый Цвет(255, 0, 0);
	ИначеЕсли ИтоговыеЗначения.ОборачиваемостьЗапасов < 8 Тогда
		Элементы.ИндикаторОборачиваемость.ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы.ИндикаторОборачиваемость.ЦветТекста = Новый Цвет(0, 128, 0);
	КонецЕсли;
	
	Если ИтоговыеЗначения.ДнейЗапаса > 90 Тогда
		Элементы.ИндикаторДнейЗапаса.ЦветТекста = Новый Цвет(255, 0, 0);
	ИначеЕсли ИтоговыеЗначения.ДнейЗапаса > 60 Тогда
		Элементы.ИндикаторДнейЗапаса.ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы.ИндикаторДнейЗапаса.ЦветТекста = Новый Цвет(0, 128, 0);
	КонецЕсли;
	
	Если ИтоговыеЗначения.КоэффициентВыполненияЗаказов >= 95 Тогда
		Элементы.ИндикаторВыполнениеЗаказов.ЦветТекста = Новый Цвет(0, 128, 0);
	ИначеЕсли ИтоговыеЗначения.КоэффициентВыполненияЗаказов >= 85 Тогда
		Элементы.ИндикаторВыполнениеЗаказов.ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы.ИндикаторВыполнениеЗаказов.ЦветТекста = Новый Цвет(255, 0, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуТопТоваровПоОстаткам()
	
	РезультатКомпоновки = ВыполнитьКомпоновкуДанныхДляТаблицы("СКД_Запасы", "ТопТоваровПоОстаткам");
	Элементы.ТаблицаТопТоваровПоОстаткам.Вывести(РезультатКомпоновки.ТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуНизкойОборачиваемости()
	
	РезультатКомпоновки = ВыполнитьКомпоновкуДанныхДляТаблицы("СКД_Запасы", "НизкаяОборачиваемость");
	Элементы.ТаблицаНизкаяОборачиваемость.Вывести(РезультатКомпоновки.ТабличныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыРаботыСКомпоновкой

&НаСервере
Функция ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, ИмяВарианта = "")
	
	// Настройка компоновщика
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	// Загрузка варианта настроек
	Если ЗначениеЗаполнено(ИмяВарианта) И СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяВарианта) <> Неопределено Тогда
		ВариантНастроек = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяВарианта);
		КомпоновщикНастроек.ЗагрузитьНастройки(ВариантНастроек.Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	// Установка параметров и фильтров
	УстановитьПараметрыОтбора(КомпоновщикНастроек.Настройки);
	
	// Выполнение компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки());
	
	// Создание процессора компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	// Структура для возврата результатов
	РезультатКомпоновки = Новый Структура;
	
	// Вывод в табличный документ
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	РезультатКомпоновки.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	
	// Вывод в коллекцию значений для получения итогов
	РезультатЗначений = Новый РезультатКомпоновкиДанных;
	ПроцессорВыводаЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	// Повторная инициализация процессора для вывода в коллекцию
	ПроцессорКомпоновкиДляИтогов = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДляИтогов.Инициализировать(МакетКомпоновки);
	
	ПроцессорВыводаЗначений.УстановитьОбъект(РезультатЗначений);
	ПроцессорВыводаЗначений.Вывести(ПроцессорКомпоновкиДляИтогов);
	РезультатКомпоновки.Вставить("РезультатЗначений", РезультатЗначений);
	
	Возврат РезультатКомпоновки;
	
КонецФункции

&НаСервере
Функция ВыполнитьКомпоновкуДанныхДляТаблицы(ИмяМакетаСКД, ИмяВарианта)
	
	// Получение схемы компоновки данных
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет(ИмяМакетаСКД);
	
	// Выполнение компоновки с указанным вариантом
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, ИмяВарианта);
	
	Возврат РезультатКомпоновки;
	
КонецФункции

&НаСервере
Функция ПолучитьИтогиИзРезультатаКомпоновки(РезультатКомпоновки, СписокПолей)
	
	ИтоговыеЗначения = Новый Структура;
	МассивПолей = СтрРазделить(СписокПолей, ",", Ложь);
	
	// Инициализация структуры результата
	Для Каждого ИмяПоля Из МассивПолей Цикл
		ИтоговыеЗначения.Вставить(СокрЛП(ИмяПоля), 0);
	КонецЦикла;
	
	// Обход результата компоновки для получения итогов
	Для Каждого ЭлементРезультата Из РезультатКомпоновки.РезультатЗначений Цикл
		Если ТипЗнч(ЭлементРезультата) = Тип("СтрокаРезультатаКомпоновкиДанных") Тогда
			// Проверяем, является ли это итоговой строкой
			Если ЭлементРезультата.УровеньВГруппировке = 0 Тогда
				Для Каждого ЭлементСтроки Из ЭлементРезультата.ЗначенияПолей.Элементы Цикл
					ИмяПоля = Строка(ЭлементСтроки.Поле);
					Если ИтоговыеЗначения.Свойство(ИмяПоля) И ТипЗнч(ЭлементСтроки.Значение) = Тип("Число") Тогда
						ИтоговыеЗначения[ИмяПоля] = ЭлементСтроки.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговыеЗначения;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыОтбора(Настройки)
	
	// Установка периода
	УстановитьПараметрКомпоновки(Настройки, "НачалоПериода", НачалоПериода);
	УстановитьПараметрКомпоновки(Настройки, "КонецПериода", КонецПериода);
	
	// Установка отборов
	Если ЗначениеЗаполнено(Организация) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Контрагент", Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Менеджер) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Менеджер", Менеджер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		ДобавитьОтбор(Настройки.Отбор, "ГруппаНоменклатуры", ГруппаНоменклатуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Склад", Склад);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрКомпоновки(Настройки, ИмяПараметра, Значение)
	
	ПараметрКомпоновки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ПараметрКомпоновки <> Неопределено Тогда
		ПараметрКомпоновки.Значение = Значение;
		ПараметрКомпоновки.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтбор(ГруппаОтбора, ИмяПоля, Значение)
	
	НовыйОтбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Значение;
	НовыйОтбор.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыРаботыСИндикаторами

&НаСервере
Процедура УстановитьЗначениеИндикатора(ИмяИндикатора, Значение, Формат, Суффикс = "")
	
	ТекстИндикатора = Формат(Значение, Формат) + Суффикс;
	Элементы[ИмяИндикатора].Заголовок = ТекстИндикатора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветИндикатора(ИмяИндикатора, УсловиеПоложительное)
	
	Если УсловиеПоложительное Тогда
		Элементы[ИмяИндикатора].ЦветТекста = Новый Цвет(0, 128, 0); // Зеленый
	Иначе
		Элементы[ИмяИндикатора].ЦветТекста = Новый Цвет(255, 0, 0); // Красный
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаДанных

&НаКлиенте
Процедура ОбработатьРасшифровкуОтчета(Расшифровка, ИсточникРасшифровки)
	
	// Получение данных расшифровки
	ДанныеРасшифровки = ПолучитьДанныеРасшифровки(Расшифровка, ИсточникРасшифровки);
	
	Если ДанныеРасшифровки <> Неопределено Тогда
		
		Если ДанныеРасшифровки.ДействиеРасшифровки = "ОткрытьЗначение" Тогда
			// Открытие формы элемента справочника или документа
			Если ДанныеРасшифровки.ЗначениеРасшифровки <> Неопределено Тогда
				ПоказатьЗначение(, ДанныеРасшифровки.ЗначениеРасшифровки);
			КонецЕсли;
			
		ИначеЕсли ДанныеРасшифровки.ДействиеРасшифровки = "Расшифровать" Тогда
			// Формирование детализированного отчета
			СформироватьДетализированныйОтчет(ДанныеРасшифровки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеРасшифровки(Расшифровка, ИсточникРасшифровки)
	
	ДанныеРасшифровки = Новый Структура;
	ДанныеРасшифровки.Вставить("ДействиеРасшифровки", "");
	ДанныеРасшифровки.Вставить("ЗначениеРасшифровки", Неопределено);
	ДанныеРасшифровки.Вставить("ПоляГруппировки", Новый Массив);
	ДанныеРасшифровки.Вставить("Отборы", Новый Массив);
	
	// Определение схемы компоновки данных по источнику
	ИмяМакетаСКД = ОпределитьИмяМакетаСКДПоИсточнику(ИсточникРасшифровки);
	Если ПустаяСтрока(ИмяМакетаСКД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет(ИмяМакетаСКД);
	
	// Создание обработчика расшифровки
	ОбработчикРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных),
		Новый НастройкиКомпоновкиДанных);
	
	// Анализ расшифровки
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		
		ЭлементРасшифровки = ОбработчикРасшифровки.Расшифровать(Расшифровка);
		
		Если ЭлементРасшифровки <> Неопределено Тогда
			
			// Определение доступных действий
			ДоступныеДействия = ОбработчикРасшифровки.ПолучитьДействияРасшифровки(Расшифровка);
			
			Для Каждого Действие Из ДоступныеДействия Цикл
				Если Действие.Действие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
					ДанныеРасшифровки.ДействиеРасшифровки = "ОткрытьЗначение";
					ДанныеРасшифровки.ЗначениеРасшифровки = Действие.Значение;
					Прервать;
				ИначеЕсли Действие.Действие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
					ДанныеРасшифровки.ДействиеРасшифровки = "Расшифровать";
				КонецЕсли;
			КонецЦикла;
			
			// Получение полей группировки и отборов
			Для Каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
				Если Поле.Использование Тогда
					СтруктураПоля = Новый Структура("Поле, Значение", Поле.Поле, Поле.Значение);
					ДанныеРасшифровки.ПоляГруппировки.Добавить(СтруктураПоля);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеРасшифровки;
	
КонецФункции

&НаСервере
Функция ОпределитьИмяМакетаСКДПоИсточнику(ИсточникРасшифровки)
	
	Если СтрНайти(ИсточникРасшифровки, "Продаж") > 0 Или СтрНайти(ИсточникРасшифровки, "Товар") > 0 Или СтрНайти(ИсточникРасшифровки, "Контрагент") > 0 Тогда
		Возврат "СКД_Продажи";
	ИначеЕсли СтрНайти(ИсточникРасшифровки, "Прибыл") > 0 Или СтрНайти(ИсточникРасшифровки, "Убыточн") > 0 Тогда
		Возврат "СКД_Прибыльность";
	ИначеЕсли СтрНайти(ИсточникРасшифровки, "Взаимо") > 0 Или СтрНайти(ИсточникРасшифровки, "Дебитор") > 0 Или СтрНайти(ИсточникРасшифровки, "Просрочен") > 0 Тогда
		Возврат "СКД_Взаиморасчеты";
	ИначеЕсли СтрНайти(ИсточникРасшифровки, "Запас") > 0 Или СтрНайти(ИсточникРасшифровки, "Оборачиваем") > 0 Тогда
		Возврат "СКД_Запасы";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СформироватьДетализированныйОтчет(ДанныеРасшифровки)
	
	// Формирование параметров для детализированного отчета
	ПараметрыОтчета = СобратьПараметрыДляДетализации(ДанныеРасшифровки);
	
	// Открытие формы детализированного отчета
	ОткрытьФорму("Обработка.ДКП_ДашбордKPI.Форма.ФормаДетализированногоОтчета", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьПараметрыДляДетализации(ДанныеРасшифровки)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода", КонецПериода);
	ПараметрыОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("Контрагент", Контрагент);
	ПараметрыОтчета.Вставить("Менеджер", Менеджер);
	ПараметрыОтчета.Вставить("Номенклатура", Номенклатура);
	ПараметрыОтчета.Вставить("ГруппаНоменклатуры", ГруппаНоменклатуры);
	ПараметрыОтчета.Вставить("Склад", Склад);
	
	// Добавление отборов из расшифровки
	Для Каждого ПолеГруппировки Из ДанныеРасшифровки.ПоляГруппировки Цикл
		Если ПолеГруппировки.Поле = "Номенклатура" И ПолеГруппировки.Значение <> Неопределено Тогда
			ПараметрыОтчета.Вставить("Номенклатура", ПолеГруппировки.Значение);
		ИначеЕсли ПолеГруппировки.Поле = "Контрагент" И ПолеГруппировки.Значение <> Неопределено Тогда
			ПараметрыОтчета.Вставить("Контрагент", ПолеГруппировки.Значение);
		ИначеЕсли ПолеГруппировки.Поле = "Менеджер" И ПолеГруппировки.Значение <> Неопределено Тогда
			ПараметрыОтчета.Вставить("Менеджер", ПолеГруппировки.Значение);
		ИначеЕсли ПолеГруппировки.Поле = "Склад" И ПолеГруппировки.Значение <> Неопределено Тогда
			ПараметрыОтчета.Вставить("Склад", ПолеГруппировки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область СравнениеСПрошлымПериодом

&НаСервере
Процедура СравнитьСПрошлымПериодомНаСервере()
	
	// Сохранение текущих значений периода
	ТекущееНачалоПериода = НачалоПериода;
	ТекущийКонецПериода = КонецПериода;
	
	// Расчет аналогичного периода прошлого года
	НачалоПериодаПрошлогоГода = ДобавитьМесяц(НачалоПериода, -12);
	КонецПериодаПрошлогоГода = ДобавитьМесяц(КонецПериода, -12);
	
	// Установка периода прошлого года
	НачалоПериода = НачалоПериодаПрошлогоГода;
	КонецПериода = КонецПериодаПрошлогоГода;
	
	// Получение данных за прошлый период
	ДанныеПрошлогоПериода = Новый Структура;
	ДанныеПрошлогоПериода.Вставить("Выручка", ПолучитьЗначениеKPI("Выручка"));
	ДанныеПрошлогоПериода.Вставить("ВаловаяПрибыль", ПолучитьЗначениеKPI("ВаловаяПрибыль"));
	ДанныеПрошлогоПериода.Вставить("ДебиторскаяЗадолженность", ПолучитьЗначениеKPI("ДебиторскаяЗадолженность"));
	ДанныеПрошлогоПериода.Вставить("ОборачиваемостьЗапасов", ПолучитьЗначениеKPI("ОборачиваемостьЗапасов"));
	
	// Восстановление текущего периода
	НачалоПериода = ТекущееНачалоПериода;
	КонецПериода = ТекущийКонецПериода;
	
	// Обновление данных за текущий период
	ОбновитьДанныеНаСервере();
	
	// TODO: Добавить визуализацию сравнения на форме
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеKPI(ИмяKPI)
	
	// Временная заглушка - здесь должна быть логика получения конкретного KPI
	// из результатов компоновки для указанного периода
	Возврат 0;
	
КонецФункции

#КонецОбласти

#Область ЭкспортДанных

&НаКлиенте
Процедура ЭкспортДанныхВExcel()
	
	// Определение активного элемента формы
	ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы") И ТекущийЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		
		// Получение табличного документа из поля
		ТабличныйДокумент = ТекущийЭлемент.Значение;
		
		// Диалог сохранения файла
		ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохранения.Заголовок = "Сохранить данные";
		ДиалогСохранения.Фильтр = "Файлы Excel (*.xlsx)|*.xlsx|Файлы PDF (*.pdf)|*.pdf|Веб-страница (*.html)|*.html";
		ДиалогСохранения.МножественныйВыбор = Ложь;
		
		Если ДиалогСохранения.Выбрать() Тогда
			
			ИмяФайла = ДиалогСохранения.ПолноеИмяФайла;
			
			// Определение типа файла по расширению
			Если СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".xlsx") Тогда
				ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
			ИначеЕсли СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".pdf") Тогда
				ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
			ИначеЕсли СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".html") Тогда
				ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
			КонецЕсли;
			
			Сообщить("Данные успешно экспортированы в файл: " + ИмяФайла);
			
		КонецЕсли;
		
	Иначе
		Предупреждение("Выберите таблицу для экспорта");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти