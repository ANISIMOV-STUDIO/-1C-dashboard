// Расширенный модуль формы дашборда KPI с полным функционалом
// Часть 3: Персонализация, экспорт и дополнительная визуализация

#Область НастройкиПользователя

&НаСервере
Процедура ЗагрузитьНастройкиПользователя()
	
	НастройкиПользователя = Новый Структура;
	НастройкиПользователя.Вставить("АвтообновлениеПриОткрытии", Истина);
	НастройкиПользователя.Вставить("АвтообновлениеВключено", Ложь);
	НастройкиПользователя.Вставить("ИнтервалАвтообновления", 300); // 5 минут
	НастройкиПользователя.Вставить("ОтправлятьУведомленияОбОшибках", Ложь);
	НастройкиПользователя.Вставить("ПоказыватьСпарклайны", Истина);
	НастройкиПользователя.Вставить("ПолноэкранныйРежим", Ложь);
	
	// Загрузка сохраненных настроек
	СохраненныеНастройки = ХранилищеОбщихНастроек.Загрузить("ДашбордKPI_НастройкиПользователя");
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПользователя, СохраненныеНастройки);
	КонецЕсли;
	
	// Загрузка персонализированных виджетов главной страницы
	ЗагрузитьПерсонализированныеВиджеты();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПользователяНаСервере()
	
	Попытка
		ХранилищеОбщихНастроек.Сохранить("ДашбордKPI_НастройкиПользователя", , НастройкиПользователя);
		
		// Сохранение персонализированных виджетов
		СохранитьПерсонализированныеВиджеты();
		
	Исключение
		// Не критичная ошибка, просто логируем
		ЗаписьЖурналаРегистрации("ДашбордKPI.СохранениеНастроек", 
			УровеньЖурналаРегистрации.Предупреждение, , , 
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек()
	
	ПараметрыФормы = Новый Структура("НастройкиПользователя", НастройкиПользователя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияНастроек", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ДКП_ДашбордKPI.Форма.ФормаНастроек", 
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор, 
		, 
		, 
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		НастройкиПользователя = Результат;
		ПрименитьНастройкиПользователя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиПользователя()
	
	// Применение настроек автообновления
	Если НастройкиПользователя.АвтообновлениеВключено Тогда
		ПодключитьОбработчикОжидания("АвтообновлениеДанных", 
			НастройкиПользователя.ИнтервалАвтообновления);
	Иначе
		ОтключитьОбработчикОжидания("АвтообновлениеДанных");
	КонецЕсли;
	
	// Применение настроек визуализации
	ПоказатьСкрытьСпарклайны(НастройкиПользователя.ПоказыватьСпарклайны);
	
	// Сохранение настроек
	СохранитьНастройкиПользователяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеДанных()
	
	// Автоматическое обновление данных по таймеру
	ОбновитьДанныеАсинхронно();
	
КонецПроцедуры

#КонецОбласти

#Область ПерсонализацияВиджетов

&НаСервере
Процедура ЗагрузитьПерсонализированныеВиджеты()
	
	// Загрузка сохраненной конфигурации виджетов главной страницы
	КонфигурацияВиджетов = ХранилищеОбщихНастроек.Загрузить("ДашбордKPI_КонфигурацияВиджетов");
	
	Если ТипЗнч(КонфигурацияВиджетов) = Тип("Массив") Тогда
		ПрименитьКонфигурациюВиджетов(КонфигурацияВиджетов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПерсонализированныеВиджеты()
	
	// Сохранение текущей конфигурации виджетов
	КонфигурацияВиджетов = ПолучитьТекущуюКонфигурациюВиджетов();
	
	Попытка
		ХранилищеОбщихНастроек.Сохранить("ДашбордKPI_КонфигурацияВиджетов", , КонфигурацияВиджетов);
	Исключение
		// Не критично
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущуюКонфигурациюВиджетов()
	
	КонфигурацияВиджетов = Новый Массив;
	
	// Здесь должна быть логика сбора текущей конфигурации виджетов
	// с главной страницы
	
	Возврат КонфигурацияВиджетов;
	
КонецФункции

&НаСервере
Процедура ПрименитьКонфигурациюВиджетов(КонфигурацияВиджетов)
	
	// Применение сохраненной конфигурации виджетов
	// Изменение порядка, видимости и размеров виджетов
	
КонецПроцедуры

#КонецОбласти

#Область ЭкспортДанных

&НаКлиенте
Процедура ЭкспортДанныхВExcel()
	
	// Диалог выбора вариантов экспорта
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ТекущаяВкладка", "Текущая вкладка");
	СписокВариантов.Добавить("ВсеДанные", "Все данные дашборда");
	СписокВариантов.Добавить("Отчет", "Сформировать отчет для руководства");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораВариантаЭкспорта", ЭтотОбъект);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВариантов, Элементы.КнопкаЭкспорт);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВариантаЭкспорта(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ТекущаяВкладка" Тогда
		ЭкспортироватьТекущуюВкладку();
	ИначеЕсли ВыбранныйЭлемент.Значение = "ВсеДанные" Тогда
		ЭкспортироватьВсеДанные();
	ИначеЕсли ВыбранныйЭлемент.Значение = "Отчет" Тогда
		СформироватьОтчетДляРуководства();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьТекущуюВкладку()
	
	// Определение активного элемента формы
	ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы") И ТекущийЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		
		// Получение табличного документа из поля
		ТабличныйДокумент = ТекущийЭлемент.Значение;
		
		// Диалог сохранения файла
		ВыбратьФайлДляСохранения(ТабличныйДокумент, "Дашборд_" + ТекущийЭлемент.Имя);
		
	Иначе
		// Экспорт всей текущей вкладки
		ТабличныйДокумент = СформироватьТабличныйДокументТекущейВкладки();
		Если ТабличныйДокумент <> Неопределено Тогда
			ВыбратьФайлДляСохранения(ТабличныйДокумент, "Дашборд_" + Элементы.ПанельСтраниц.ТекущаяСтраница.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлДляСохранения(ТабличныйДокумент, ИмяФайлаПоУмолчанию)
	
	ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохранения.Заголовок = "Сохранить данные";
	ДиалогСохранения.Фильтр = "Файлы Excel (*.xlsx)|*.xlsx|Файлы PDF (*.pdf)|*.pdf|Веб-страница (*.html)|*.html";
	ДиалогСохранения.МножественныйВыбор = Ложь;
	ДиалогСохранения.ПолноеИмяФайла = ИмяФайлаПоУмолчанию + ".xlsx";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаДляСохранения", ЭтотОбъект, ТабличныйДокумент);
	
	ДиалогСохранения.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаДляСохранения(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = ДополнительныеПараметры;
	ИмяФайла = ВыбранныеФайлы[0];
	
	Попытка
		// Определение типа файла по расширению
		Если СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".xlsx") Тогда
			ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
		ИначеЕсли СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".pdf") Тогда
			ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		ИначеЕсли СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".html") Тогда
			ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Экспорт завершен",
			ИмяФайла,
			"Данные успешно сохранены",
			БиблиотекаКартинок.Успешно32);
			
	Исключение
		ПоказатьПредупреждение(, "Ошибка при сохранении файла: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТабличныйДокументТекущейВкладки()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		// Определение текущей вкладки
		ТекущаяСтраница = Элементы.ПанельСтраниц.ТекущаяСтраница;
		
		Если ТекущаяСтраница.Имя = "СтраницаПродажи" Тогда
			СформироватьТабДокПродажи(ТабличныйДокумент);
		ИначеЕсли ТекущаяСтраница.Имя = "СтраницаПрибыльность" Тогда
			СформироватьТабДокПрибыльность(ТабличныйДокумент);
		ИначеЕсли ТекущаяСтраница.Имя = "СтраницаВзаиморасчеты" Тогда
			СформироватьТабДокВзаиморасчеты(ТабличныйДокумент);
		ИначеЕсли ТекущаяСтраница.Имя = "СтраницаЗапасы" Тогда
			СформироватьТабДокЗапасы(ТабличныйДокумент);
		ИначеЕсли ТекущаяСтраница.Имя = "СтраницаДенежныеПотоки" Тогда
			СформироватьТабДокДенежныеПотоки(ТабличныйДокумент);
		КонецЕсли;
		
	Исключение
		ОбработатьОшибку("ФормированиеТабДок", ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ЭкспортироватьВсеДанные()
	
	// Формирование полного отчета асинхронно
	РезультатЗапуска = НачатьФормированиеПолногоОтчетаНаСервере();
	
	Если РезультатЗапуска.Выполнено Тогда
		ВыбратьФайлДляСохранения(РезультатЗапуска.ТабличныйДокумент, "Дашборд_Полный_" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd"));
	Иначе
		ПоказатьПредупреждение(, "Формирование полного отчета запущено в фоновом режиме. Вы получите уведомление по завершении.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетДляРуководства()
	
	// Открытие специальной формы для настройки отчета
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода", КонецПериода);
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("Обработка.ДКП_ДашбордKPI.Форма.ФормаОтчетаДляРуководства", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область Спарклайны

&НаСервере
Процедура ИнициализироватьСпарклайны()
	
	Если НЕ НастройкиПользователя.ПоказыватьСпарклайны Тогда
		Возврат;
	КонецЕсли;
	
	// Создание элементов для спарклайнов рядом с основными KPI
	// Это заглушка - в реальности нужна библиотека визуализации
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСпарклайны(Показывать)
	
	// Управление видимостью спарклайнов
	СписокСпарклайнов = Новый Массив;
	СписокСпарклайнов.Добавить("СпарклайнВыручка");
	СписокСпарклайнов.Добавить("СпарклайнПрибыль");
	СписокСпарклайнов.Добавить("СпарклайнДебиторская");
	СписокСпарклайнов.Добавить("СпарклайнЗапасы");
	
	Для Каждого ИмяЭлемента Из СписокСпарклайнов Цикл
		Элемент = Элементы.Найти(ИмяЭлемента);
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Показывать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолноэкранныйРежим

&НаКлиенте
Процедура ПереключитьПолноэкранныйРежим()
	
	НастройкиПользователя.ПолноэкранныйРежим = НЕ НастройкиПользователя.ПолноэкранныйРежим;
	
	Если НастройкиПользователя.ПолноэкранныйРежим Тогда
		// Переход в полноэкранный режим
		Элементы.ГруппаФильтры.Видимость = Ложь;
		Элементы.КоманднаяПанель.Видимость = Ложь;
		
		// Увеличение размеров графиков
		УвеличитьРазмерыГрафиков();
		
		// Показ кнопки выхода из полноэкранного режима
		Если Элементы.Найти("КнопкаВыходИзПолноэкранногоРежима") <> Неопределено Тогда
			Элементы.КнопкаВыходИзПолноэкранногоРежима.Видимость = Истина;
		КонецЕсли;
	Иначе
		// Выход из полноэкранного режима
		Элементы.ГруппаФильтры.Видимость = Истина;
		Элементы.КоманднаяПанель.Видимость = Истина;
		
		// Восстановление размеров графиков
		ВосстановитьРазмерыГрафиков();
		
		Если Элементы.Найти("КнопкаВыходИзПолноэкранногоРежима") <> Неопределено Тогда
			Элементы.КнопкаВыходИзПолноэкранногоРежима.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьРазмерыГрафиков()
	
	// Увеличение высоты графиков для полноэкранного режима
	МассивГрафиков = Новый Массив;
	МассивГрафиков.Добавить("ГрафикПродажи");
	МассивГрафиков.Добавить("ГрафикПрибыльность");
	МассивГрафиков.Добавить("ГрафикВзаиморасчеты");
	МассивГрафиков.Добавить("ГрафикЗапасы");
	МассивГрафиков.Добавить("ДиаграммаДенежныеПотоки");
	
	Для Каждого ИмяГрафика Из МассивГрафиков Цикл
		Элемент = Элементы.Найти(ИмяГрафика);
		Если Элемент <> Неопределено Тогда
			Элемент.Высота = Элемент.Высота * 1.5;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьРазмерыГрафиков()
	
	// Восстановление стандартных размеров графиков
	МассивГрафиков = Новый Массив;
	МассивГрафиков.Добавить("ГрафикПродажи");
	МассивГрафиков.Добавить("ГрафикПрибыльность");
	МассивГрафиков.Добавить("ГрафикВзаиморасчеты");
	МассивГрафиков.Добавить("ГрафикЗапасы");
	МассивГрафиков.Добавить("ДиаграммаДенежныеПотоки");
	
	Для Каждого ИмяГрафика Из МассивГрафиков Цикл
		Элемент = Элементы.Найти(ИмяГрафика);
		Если Элемент <> Неопределено Тогда
			Элемент.Высота = Элемент.Высота / 1.5;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область DrillDown

&НаКлиенте
Процедура ОбработатьРасшифровкуОтчета(Расшифровка, ИсточникРасшифровки)
	
	// Получение данных расшифровки
	ДанныеРасшифровки = ПолучитьДанныеРасшифровки(Расшифровка, ИсточникРасшифровки);
	
	Если ДанныеРасшифровки <> Неопределено Тогда
		
		Если ДанныеРасшифровки.ДействиеРасшифровки = "ОткрытьЗначение" Тогда
			// Открытие формы элемента справочника или документа
			Если ДанныеРасшифровки.ЗначениеРасшифровки <> Неопределено Тогда
				ПоказатьЗначение(, ДанныеРасшифровки.ЗначениеРасшифровки);
			КонецЕсли;
			
		ИначеЕсли ДанныеРасшифровки.ДействиеРасшифровки = "Расшифровать" Тогда
			// Формирование детализированного отчета
			СформироватьДетализированныйОтчет(ДанныеРасшифровки);
			
		ИначеЕсли ДанныеРасшифровки.ДействиеРасшифровки = "ИнтерактивныйАнализ" Тогда
			// Открытие формы интерактивного анализа
			ОткрытьФормуИнтерактивногоАнализа(ДанныеРасшифровки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИнтерактивногоАнализа(ДанныеРасшифровки)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода", КонецПериода);
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("Обработка.ДКП_ДашбордKPI.Форма.ФормаИнтерактивногоАнализа", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти