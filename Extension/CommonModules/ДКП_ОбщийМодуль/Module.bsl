////////////////////////////////////////////////////////////////////////////////
// ДКП_ОбщийМодуль
// Общие процедуры и функции для работы дашборда KPI
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает данные дашборда KPI по всем показателям
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для формирования отчета:
//    * НачалоПериода - Дата - начальная дата периода анализа
//    * КонецПериода - Дата - конечная дата периода анализа
//    * Организация - СправочникСсылка.Организации - организация для фильтра
//    * Контрагент - СправочникСсылка.Контрагенты - контрагент для фильтра
//    * Менеджер - СправочникСсылка.Пользователи - менеджер для фильтра
//
// Возвращаемое значение:
//  Структура - структура с данными дашборда:
//    * Продажи - Структура - результаты анализа продаж
//    * Прибыльность - Структура - результаты анализа прибыльности
//    * Взаиморасчеты - Структура - результаты анализа взаиморасчетов
//    * Запасы - Структура - результаты анализа запасов
//    * ДенежныеПотоки - Структура - результаты анализа денежных потоков
//    * ОшибкиВыполнения - Массив - массив ошибок, возникших при выполнении
//
Функция ПолучитьДанныеДашборда(ПараметрыОтчета) Экспорт
	
	// Инициализация результата
	Результат = Новый Структура();
	Результат.Вставить("Продажи", Новый Структура());
	Результат.Вставить("Прибыльность", Новый Структура());
	Результат.Вставить("Взаиморасчеты", Новый Структура());
	Результат.Вставить("Запасы", Новый Структура());
	Результат.Вставить("ДенежныеПотоки", Новый Структура());
	Результат.Вставить("ОшибкиВыполнения", Новый Массив());
	
	// Валидация входящих параметров
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		Результат.ОшибкиВыполнения.Добавить("Не указано начало периода");
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		Результат.ОшибкиВыполнения.Добавить("Не указан конец периода");
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыОтчета.НачалоПериода > ПараметрыОтчета.КонецПериода Тогда
		Результат.ОшибкиВыполнения.Добавить("Начало периода не может быть больше конца периода");
		Возврат Результат;
	КонецЕсли;
	
	// Получение данных по продажам
	Попытка
		Результат.Продажи = ПолучитьДанныеПродаж(ПараметрыОтчета);
	Исключение
		ТекстОшибки = "Ошибка получения данных по продажам: " + ОписаниеОшибки();
		Результат.ОшибкиВыполнения.Добавить(ТекстОшибки);
		ЗаписьЖурналаРегистрации("ДКП.ПолучениеДанныхПродаж", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	// Получение данных по прибыльности
	Попытка
		Результат.Прибыльность = ПолучитьДанныеПрибыльности(ПараметрыОтчета);
	Исключение
		ТекстОшибки = "Ошибка получения данных по прибыльности: " + ОписаниеОшибки();
		Результат.ОшибкиВыполнения.Добавить(ТекстОшибки);
		ЗаписьЖурналаРегистрации("ДКП.ПолучениеДанныхПрибыльности", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	// Получение данных по взаиморасчетам
	Попытка
		Результат.Взаиморасчеты = ПолучитьДанныеВзаиморасчетов(ПараметрыОтчета);
	Исключение
		ТекстОшибки = "Ошибка получения данных по взаиморасчетам: " + ОписаниеОшибки();
		Результат.ОшибкиВыполнения.Добавить(ТекстОшибки);
		ЗаписьЖурналаРегистрации("ДКП.ПолучениеДанныхВзаиморасчетов", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	// Получение данных по запасам
	Попытка
		Результат.Запасы = ПолучитьДанныеЗапасов(ПараметрыОтчета);
	Исключение
		ТекстОшибки = "Ошибка получения данных по запасам: " + ОписаниеОшибки();
		Результат.ОшибкиВыполнения.Добавить(ТекстОшибки);
		ЗаписьЖурналаРегистрации("ДКП.ПолучениеДанныхЗапасов", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	// Получение данных по денежным потокам
	Попытка
		Результат.ДенежныеПотоки = ПолучитьДанныеДенежныхПотоков(ПараметрыОтчета);
	Исключение
		ТекстОшибки = "Ошибка получения данных по денежным потокам: " + ОписаниеОшибки();
		Результат.ОшибкиВыполнения.Добавить(ТекстОшибки);
		ЗаписьЖурналаРегистрации("ДКП.ПолучениеДанныхДенежныхПотоков", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получает данные по продажам из схемы компоновки данных
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры отчета
//
// Возвращаемое значение:
//  Структура - данные по продажам
//
Функция ПолучитьДанныеПродаж(ПараметрыОтчета)
	
	// Получение макета схемы компоновки данных
	МакетСКД = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Продажи");
	
	// Создание компоновщика настроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетСКД));
	
	// Получение настроек по умолчанию
	Настройки = КомпоновщикНастроек.Настройки;
	
	// Установка параметров
	УстановитьПараметрСКД(Настройки, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	УстановитьПараметрСКД(Настройки, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	
	// Применение дополнительных фильтров
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ДобавитьОтборСКД(Настройки, "Организация", ПараметрыОтчета.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Контрагент) Тогда
		ДобавитьОтборСКД(Настройки, "Контрагент", ПараметрыОтчета.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Менеджер) Тогда
		ДобавитьОтборСКД(Настройки, "Менеджер", ПараметрыОтчета.Менеджер);
	КонецЕсли;
	
	// Выполнение компоновки данных
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(МакетСКД, Настройки);
	
	// Обработка результата и формирование структуры данных
	РезультатПродажи = Новый Структура();
	РезультатПродажи.Вставить("Выручка", 0);
	РезультатПродажи.Вставить("КоличествоПродаж", 0);
	РезультатПродажи.Вставить("СреднийЧек", 0);
	РезультатПродажи.Вставить("ДинамикаПоДням", Новый Массив());
	РезультатПродажи.Вставить("ТопТоваров", Новый Массив());
	РезультатПродажи.Вставить("ТопКонтрагентов", Новый Массив());
	РезультатПродажи.Вставить("ТабличныйДокумент", РезультатКомпоновки);
	
	// Извлечение итоговых показателей из результата компоновки
	Если РезультатКомпоновки.ВысотаТаблицы > 0 Тогда
		
		// Расчет основных показателей
		СуммаВыручки = 0;
		КоличествоДокументов = 0;
		
		// Проход по результату для получения агрегированных данных
		Для НомерСтроки = 1 По РезультатКомпоновки.ВысотаТаблицы Цикл
			
			ОбластьСтроки = РезультатКомпоновки.Область(НомерСтроки, 1, НомерСтроки, РезультатКомпоновки.ШиринаТаблицы);
			
			Если ОбластьСтроки.СодержитЗначения Тогда
				// Поиск колонок с данными
				Для НомерКолонки = 1 По РезультатКомпоновки.ШиринаТаблицы Цикл
					Ячейка = РезультатКомпоновки.Область(НомерСтроки, НомерКолонки);
					Если ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						СуммаВыручки = СуммаВыручки + Ячейка.Значение;
					КонецЕсли;
				КонецЦикла;
				КоличествоДокументов = КоличествоДокументов + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		РезультатПродажи.Выручка = СуммаВыручки;
		РезультатПродажи.КоличествоПродаж = КоличествоДокументов;
		Если КоличествоДокументов > 0 Тогда
			РезультатПродажи.СреднийЧек = СуммаВыручки / КоличествоДокументов;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПродажи;
	
КонецФункции

// Получает данные по прибыльности из схемы компоновки данных
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры отчета
//
// Возвращаемое значение:
//  Структура - данные по прибыльности
//
Функция ПолучитьДанныеПрибыльности(ПараметрыОтчета)
	
	// Получение макета схемы компоновки данных
	МакетСКД = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Прибыльность");
	
	// Создание компоновщика настроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетСКД));
	
	// Получение настроек по умолчанию
	Настройки = КомпоновщикНастроек.Настройки;
	
	// Установка параметров
	УстановитьПараметрСКД(Настройки, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	УстановитьПараметрСКД(Настройки, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	
	// Применение дополнительных фильтров
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ДобавитьОтборСКД(Настройки, "Организация", ПараметрыОтчета.Организация);
	КонецЕсли;
	
	// Выполнение компоновки данных
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(МакетСКД, Настройки);
	
	// Обработка результата
	РезультатПрибыльности = Новый Структура();
	РезультатПрибыльности.Вставить("Выручка", 0);
	РезультатПрибыльности.Вставить("Себестоимость", 0);
	РезультатПрибыльности.Вставить("ВаловаяПрибыль", 0);
	РезультатПрибыльности.Вставить("МаржинальностьПроцент", 0);
	РезультатПрибыльности.Вставить("ТабличныйДокумент", РезультатКомпоновки);
	
	// TODO: Извлечение показателей из результата компоновки
	// Здесь должна быть логика парсинга табличного документа для получения показателей
	
	Возврат РезультатПрибыльности;
	
КонецФункции

// Получает данные по взаиморасчетам из схемы компоновки данных
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры отчета
//
// Возвращаемое значение:
//  Структура - данные по взаиморасчетам
//
Функция ПолучитьДанныеВзаиморасчетов(ПараметрыОтчета)
	
	// Получение макета схемы компоновки данных
	МакетСКД = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Взаиморасчеты");
	
	// Создание компоновщика настроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетСКД));
	
	// Получение настроек по умолчанию
	Настройки = КомпоновщикНастроек.Настройки;
	
	// Установка параметров
	УстановитьПараметрСКД(Настройки, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	УстановитьПараметрСКД(Настройки, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	
	// Применение дополнительных фильтров
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ДобавитьОтборСКД(Настройки, "Организация", ПараметрыОтчета.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Контрагент) Тогда
		ДобавитьОтборСКД(Настройки, "Контрагент", ПараметрыОтчета.Контрагент);
	КонецЕсли;
	
	// Выполнение компоновки данных
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(МакетСКД, Настройки);
	
	// Обработка результата
	РезультатВзаиморасчетов = Новый Структура();
	РезультатВзаиморасчетов.Вставить("ДебиторскаяЗадолженность", 0);
	РезультатВзаиморасчетов.Вставить("КредиторскаяЗадолженность", 0);
	РезультатВзаиморасчетов.Вставить("ПросроченнаяДебиторская", 0);
	РезультатВзаиморасчетов.Вставить("ПросроченнаяКредиторская", 0);
	РезультатВзаиморасчетов.Вставить("ТабличныйДокумент", РезультатКомпоновки);
	
	Возврат РезультатВзаиморасчетов;
	
КонецФункции

// Получает данные по запасам из схемы компоновки данных
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры отчета
//
// Возвращаемое значение:
//  Структура - данные по запасам
//
Функция ПолучитьДанныеЗапасов(ПараметрыОтчета)
	
	// Получение макета схемы компоновки данных
	МакетСКД = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Запасы");
	
	// Создание компоновщика настроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетСКД));
	
	// Получение настроек по умолчанию
	Настройки = КомпоновщикНастроек.Настройки;
	
	// Установка параметров
	УстановитьПараметрСКД(Настройки, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	УстановитьПараметрСКД(Настройки, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	
	// Применение дополнительных фильтров
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ДобавитьОтборСКД(Настройки, "Организация", ПараметрыОтчета.Организация);
	КонецЕсли;
	
	// Выполнение компоновки данных
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(МакетСКД, Настройки);
	
	// Обработка результата
	РезультатЗапасов = Новый Структура();
	РезультатЗапасов.Вставить("СтоимостьЗапасов", 0);
	РезультатЗапасов.Вставить("ОборачиваемостьДни", 0);
	РезультатЗапасов.Вставить("КоэффициентОборачиваемости", 0);
	РезультатЗапасов.Вставить("ТабличныйДокумент", РезультатКомпоновки);
	
	Возврат РезультатЗапасов;
	
КонецФункции

// Получает данные по денежным потокам из схемы компоновки данных
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры отчета
//
// Возвращаемое значение:
//  Структура - данные по денежным потокам
//
Функция ПолучитьДанныеДенежныхПотоков(ПараметрыОтчета)
	
	// Получение макета схемы компоновки данных
	МакетСКД = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_ДенежныеПотоки");
	
	// Создание компоновщика настроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетСКД));
	
	// Получение настроек по умолчанию
	Настройки = КомпоновщикНастроек.Настройки;
	
	// Установка параметров
	УстановитьПараметрСКД(Настройки, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	УстановитьПараметрСКД(Настройки, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	
	// Применение дополнительных фильтров
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ДобавитьОтборСКД(Настройки, "Организация", ПараметрыОтчета.Организация);
	КонецЕсли;
	
	// Выполнение компоновки данных
	РезультатКомпоновки = ВыполнитьКомпоновкуДанных(МакетСКД, Настройки);
	
	// Обработка результата
	РезультатДенежныхПотоков = Новый Структура();
	РезультатДенежныхПотоков.Вставить("ОстатокНаНачало", 0);
	РезультатДенежныхПотоков.Вставить("Поступления", 0);
	РезультатДенежныхПотоков.Вставить("Списания", 0);
	РезультатДенежныхПотоков.Вставить("ОстатокНаКонец", 0);
	РезультатДенежныхПотоков.Вставить("ЧистыйДенежныйПоток", 0);
	РезультатДенежныхПотоков.Вставить("ТабличныйДокумент", РезультатКомпоновки);
	
	Возврат РезультатДенежныхПотоков;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает значение параметра в настройках компоновки данных
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных - настройки компоновки
//  ИмяПараметра - Строка - имя параметра
//  ЗначениеПараметра - Произвольный - значение параметра
//
Процедура УстановитьПараметрСКД(Настройки, ИмяПараметра, ЗначениеПараметра)
	
	ЭлементПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ЭлементПараметра <> Неопределено Тогда
		ЭлементПараметра.Значение = ЗначениеПараметра;
		ЭлементПараметра.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет отбор в настройки компоновки данных
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных - настройки компоновки
//  ИмяПоля - Строка - имя поля для отбора
//  ЗначениеОтбора - Произвольный - значение отбора
//
Процедура ДобавитьОтборСКД(Настройки, ИмяПоля, ЗначениеОтбора)
	
	ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

// Выполняет компоновку данных и возвращает результат в виде табличного документа
//
// Параметры:
//  МакетСКД - СхемаКомпоновкиДанных - схема компоновки данных
//  Настройки - НастройкиКомпоновкиДанных - настройки компоновки
//
// Возвращаемое значение:
//  ТабличныйДокумент - результат выполнения компоновки данных
//
Функция ВыполнитьКомпоновкуДанных(МакетСКД, Настройки)
	
	// Создание процессора компоновки данных
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетСКД, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Создание процессора вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	
	// Выполнение компоновки
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти