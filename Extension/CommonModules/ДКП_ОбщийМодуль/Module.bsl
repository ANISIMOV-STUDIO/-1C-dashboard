////////////////////////////////////////////////////////////////////////////////
// ДКП_ОбщийМодуль (refactored)
// Универсальные процедуры и функции для дашборда KPI
// Версия: 2025‑08‑07
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//------------------------------------------------------------------------
// ПолучитьДанныеДашборда()
//------------------------------------------------------------------------
// Возвращает агрегированную структуру со всеми разделами KPI или
// массив ошибок, если входные параметры неверны.
//------------------------------------------------------------------------
Функция ПолучитьДанныеДашборда(ПараметрыОтчета) Экспорт

	Результат           = Новый Структура();
	МассивОшибок        = Новый Массив();

	// ---------- валидация периода ----------
	Если НЕ ПроверитьПериод(ПараметрыОтчета.НачалоПериода,
						 ПараметрыОтчета.КонецПериода,
						 МассивОшибок) Тогда
		Возврат Новый Структура("ОшибкиВыполнения", МассивОшибок);
	КонецЕсли;

	// ---------- карта KPI‑разделов ----------
	СписокKPI = Новый СписокЗначений();
	//            Макет             | Ключ             | Поля итогов
	СписокKPI.Добавить(Новый Структура("Макет,Ключ,Поля", "СКД_Продажи",        "Продажи",        Новый Массив("Выручка","КоличествоПродаж","СреднийЧек")));
	СписокKPI.Добавить(Новый Структура("Макет,Ключ,Поля", "СКД_Прибыльность",   "Прибыльность",   Новый Массив("Выручка","Себестоимость","ВаловаяПрибыль","ОперационнаяПрибыль","ЧистаяПрибыль")));
	СписокKPI.Добавить(Новый Структура("Макет,Ключ,Поля", "СКД_Взаиморасчеты",  "Взаиморасчеты",  Новый Массив("ДебиторскаяЗадолженность","КредиторскаяЗадолженность","ПросроченнаяДебиторскаяЗадолженность","ПросроченнаяКредиторскаяЗадолженность")));
	СписокKPI.Добавить(Новый Структура("Макет,Ключ,Поля", "СКД_Запасы",         "Запасы",         Новый Массив("СтоимостьОстаток","ОборачиваемостьЗапасов","ДнейЗапаса")));
	СписокKPI.Добавить(Новый Структура("Макет,Ключ,Поля", "СКД_ДенежныеПотоки", "ДенежныеПотоки", Новый Массив("НачальныйОстаток","Поступления","Платежи","КонечныйОстаток","СвободныйДенежныйПоток")));

	// ---------- обход KPI ----------
	Для Каждого ЭлементKPI Из СписокKPI Цикл

		Попытка
			ДанныеKPI = ПолучитьДанныеKPI(
								 ЭлементKPI.Макет,
								 ПараметрыОтчета,
								 ЭлементKPI.Поля);
			Результат.Вставить(ЭлементKPI.Ключ, ДанныеKPI);
		Исключение
			Сообщ   = СтрШаблон("Ошибка KPI <%1>: %2", ЭлементKPI.Ключ, ОписаниеОшибки());
			МассивОшибок.Добавить(Сообщ);
			ЗаписьЖурналаРегистрации("ДКП.Дашборд", УровеньЖурналаРегистрации.Ошибка,, , Сообщ);
		КонецПопытки;

	КонецЦикла;

	Результат.Вставить("ОшибкиВыполнения", МассивОшибок);

	Возврат Результат;

КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

//------------------------------------------------------------------------
// ПолучитьДанныеKPI()
//------------------------------------------------------------------------
Функция ПолучитьДанныеKPI(ИмяМакета, ПараметрыОтчета, ПоляИтогов)

	// Выполняем СКД и получаем таблицу значений с итогами
	Таблица = ВыполнитьСКД(ИмяМакета, ПараметрыОтчета);

	СтруктураИтогов = Новый Структура();
	Для Каждого Поле Из ПоляИтогов Цикл
		СтруктураИтогов.Вставить(Поле, 0);
	КонецЦикла;
	СтруктураИтогов.Вставить("Таблица", Таблица);

	// Поиск строки итогов (предполагаем, что первая строка с пустыми измерениями)
	Для Каждого Стр Из Таблица Цикл
		Если Стр.ЯвляетсяИтогами() Тогда
			Для Каждого Поле Из ПоляИтогов Цикл
				Если Стр.СвойствоСуществует(Поле) Тогда
					СтруктураИтогов[Поле] = Стр[Поле];
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураИтогов;

КонецФункции

//------------------------------------------------------------------------
// ВыполнитьСКД() – универсальный запуск схемы с динамическими фильтрами
//------------------------------------------------------------------------
Функция ВыполнитьСКД(ИмяМакета, ПараметрыОтчета)

	Макет = Обработки.ДКП_ДашбордKPI.ПолучитьМакет(ИмяМакета);
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Макет);
	КН = Новый КомпоновщикНастроекКомпоновкиДанных;
	КН.Инициализировать(Источник);
	Н = КН.Настройки;

	// --- стандартные параметры периода (если есть в схеме)
	УстановитьПараметрСКД(Н, "НачалоПериода",  ПараметрыОтчета.НачалоПериода);
	УстановитьПараметрСКД(Н, "КонецПериода",   КонецДня(ПараметрыОтчета.КонецПериода));

	// --- динамические отборы по организации / контрагенту / менеджеру
	Для Каждого К Из ПараметрыОтчета Цикл
		Если ЗначениеЗаполнено(К.Значение) Тогда
			Попытка
				ДобавитьОтборСКД(Н, К.Ключ, К.Значение);
			Исключение
				// поле может отсутствовать в конкретной СКД – это не критично
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

	// --- процессор: вывод сразу в коллекцию значений
	Проц = Новый ПроцессорКомпоновкиДанных;
	Ген  = Новый ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений;
	Проц.Инициализировать(Макет, Н,, , Ген);

	Возврат Проц.Выполнить(); // ТаблицаЗначений

КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область Валидация

//------------------------------------------------------------------------
// ПроверитьПериод() – единая проверка даты
//------------------------------------------------------------------------
Функция ПроверитьПериод(ДатаНачала, ДатаКонца, МассивОшибок)  Экспорт

	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		МассивОшибок.Добавить("Не указано начало периода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаКонца) Тогда
		МассивОшибок.Добавить("Не указан конец периода");
	КонецЕсли;
	Если МассивОшибок.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ДатаНачала > ДатаКонца Тогда
		МассивОшибок.Добавить("Начало периода не может быть больше конца периода");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

#КонецОбласти // Валидация

#Область УтилитыСКД (без изменений)

Процедура УстановитьПараметрСКД(Настройки, ИмяПараметра, ЗначениеПараметра)
	Эл = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если Эл <> Неопределено Тогда
		Эл.Значение   = ЗначениеПараметра;
		Эл.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьОтборСКД(Настройки, ИмяПоля, ЗначениеОтбора)
	Отбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = ЗначениеОтбора;
	Отбор.Использование  = Истина;
КонецПроцедуры

#КонецОбласти // УтилитыСКД
