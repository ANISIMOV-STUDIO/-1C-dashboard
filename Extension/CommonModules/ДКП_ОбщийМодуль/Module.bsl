////////////////////////////////////////////////////////////////////////////////
// ДКП_ОбщийМодуль (исправленная версия)
// Универсальные процедуры и функции для дашборда KPI
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ПолучитьДанныеДашборда(ПараметрыОтчета) Экспорт
    Результат = Новый Структура;
    МассивОшибок = Новый Массив;

    // Валидация периода
    Если НЕ ПроверитьПериод(ПараметрыОтчета, МассивОшибок) Тогда
        Результат.Вставить("ОшибкиВыполнения", МассивОшибок);
        Возврат Результат;
    КонецЕсли;

    // Карта KPI-разделов
    СписокKPI = Новый СписокЗначений;
    СписокKPI.Добавить(Новый Структура("Макет, Ключ, Поля", "СКД_Продажи", "Продажи", "Выручка,КоличествоПродаж,СреднийЧек"));
    СписокKPI.Добавить(Новый Структура("Макет, Ключ, Поля", "СКД_Прибыльность", "Прибыльность", "Выручка,Себестоимость,ВаловаяПрибыль,ОперационнаяПрибыль,ЧистаяПрибыль"));
    СписокKPI.Добавить(Новый Структура("Макет, Ключ, Поля", "СКД_Взаиморасчеты", "Взаиморасчеты", "ДебиторскаяЗадолженность,КредиторскаяЗадолженность,ПросроченнаяДебиторскаяЗадолженность,ПросроченнаяКредиторскаяЗадолженность"));
    СписокKPI.Добавить(Новый Структура("Макет, Ключ, Поля", "СКД_Запасы", "Запасы", "СтоимостьОстаток,ОборачиваемостьЗапасов,ДнейЗапаса"));
    СписокKPI.Добавить(Новый Структура("Макет, Ключ, Поля", "СКД_ДенежныеПотоки", "ДенежныеПотоки", "НачальныйОстаток,Поступления,Платежи,КонечныйОстаток,СвободныйДенежныйПоток"));

    // Обход и выполнение запросов для каждого KPI
    Для Каждого ЭлементKPI Из СписокKPI Цикл
        Попытка
            ДанныеKPI = ПолучитьДанныеKPI(ЭлементKPI.Макет, ПараметрыОтчета, ЭлементKPI.Поля);
            Результат.Вставить(ЭлементKPI.Ключ, ДанныеKPI);
        Исключение
            СообщениеОбОшибке = СтрШаблон("Ошибка при расчете KPI ""%1"": %2", ЭлементKPI.Ключ, ОписаниеОшибки());
            МассивОшибок.Добавить(СообщениеОбОшибке);
            ЗаписьЖурналаРегистрации("Дашборд.ОшибкаKPI", УровеньЖурналаРегистрации.Ошибка, , СообщениеОбОшибке);
        КонецПопытки;
    КонецЦикла;

    Результат.Вставить("ОшибкиВыполнения", МассивОшибок);
    Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеФункции

Функция ПолучитьДанныеKPI(ИмяМакета, ПараметрыОтчета, СтрокаПолейИтогов)
    ТаблицаРезультата = ВыполнитьСКД(ИмяМакета, ПараметрыОтчета);
    МассивПолейИтогов = СтрРазделить(СтрокаПолейИтогов, ",");

    СтруктураИтогов = Новый Структура;
    Для Каждого Поле Из МассивПолейИтогов Цикл
        СтруктураИтогов.Вставить(Поле, 0);
    КонецЦикла;
    
    // В результирующей таблице тоже будут данные для графиков и таблиц
    СтруктураИтогов.Вставить("Таблица", ТаблицаРезультата);

    // ИСПРАВЛЕНИЕ: Ищем строку общих итогов.
    // В результатах СКД это строка, где измерения (группировки) не заполнены.
    // Предполагаем, что "Период" есть во всех запросах и является измерением.
    Если ТаблицаРезультата.Количество() > 0 И ТаблицаРезультата.Колонки.Найти("Период") <> Неопределено Тогда
        Для Каждого СтрокаИтогов Из ТаблицаРезультата Цикл
            Если НЕ ЗначениеЗаполнено(СтрокаИтогов.Период) Тогда
                // Это строка итогов, заполняем структуру
                Для Каждого Поле Из МассивПолейИтогов Цикл
                    Если ТаблицаРезультата.Колонки.Найти(Поле) <> Неопределено Тогда
                        СтруктураИтогов[Поле] = ?(СтрокаИтогов[Поле] = NULL, 0, СтрокаИтогов[Поле]);
                    КонецЕсли;
                КонецЦикла;
                Прервать; // Нашли итоги, выходим
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

    Возврат СтруктураИтогов;
КонецФункции

Функция ВыполнитьСКД(ИмяМакета, ПараметрыОтчета)
    Макет = Обработки.ДКП_ДашбордKPI.ПолучитьМакет(ИмяМакета);
    
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Макет));
    Настройки = КомпоновщикНастроек.ПолучитьНастройки();

    // Установка стандартных параметров периода
    УстановитьПараметрСКД(Настройки, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
    УстановитьПараметрСКД(Настройки, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));

    // Динамическая установка фильтров
    УстановитьФильтрСКД(Настройки, "Организация", ПараметрыОтчета.Организация);
    УстановитьФильтрСКД(Настройки, "Контрагент", ПараметрыОтчета.Контрагент);
    УстановитьФильтрСКД(Настройки, "Менеджер", ПараметрыОтчета.Менеджер);

    // Выполнение и вывод результата в таблицу значений
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Макет, Настройки);

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

    Результат = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);

    Возврат Результат;
КонецФункции

Функция ПроверитьПериод(Параметры, МассивОшибок)
    Если НЕ ЗначениеЗаполнено(Параметры.НачалоПериода) Тогда
        МассивОшибок.Добавить("Не указано начало периода.");
    КонецЕсли;
    Если НЕ ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
        МассивОшибок.Добавить("Не указан конец периода.");
    КонецЕсли;

    Если МассивОшибок.Количество() > 0 Тогда
        Возврат Ложь;
    КонецЕсли;

    Если Параметры.НачалоПериода > Параметры.КонецПериода Тогда
        МассивОшибок.Добавить("Начало периода не может быть больше конца периода.");
        Возврат Ложь;
    КонецЕсли;

    Возврат Истина;
КонецФункции

Процедура УстановитьПараметрСКД(Настройки, Имя, Значение)
    Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
    Если Параметр <> Неопределено Тогда
        Параметр.Значение = Значение;
        Параметр.Использование = Истина;
    КонецЕсли;
КонецПроцедуры

Процедура УстановитьФильтрСКД(Настройки, ИмяПоля, Значение)
    Если НЕ ЗначениеЗаполнено(Значение) Тогда
        Возврат;
    КонецЕсли;

    // Проверяем, есть ли такое поле в доступных полях отбора
    Если Настройки.Отбор.ДоступныеПоляОтбора.Найти(ИмяПоля) = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Отбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
    Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    Отбор.ПравоеЗначение = Значение;
    Отбор.Использование = Истина;
КонецПроцедуры

#КонецОбласти