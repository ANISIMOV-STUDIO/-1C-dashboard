// Улучшенный модуль сравнения периодов с серверной архитектурой
// Заменяет неправильную реализацию из comparison_module_additions.txt

#Область СравнениеПериодовУлучшенное

&НаСервере
Процедура СравнитьСПрошлымПериодомНаСервере()
	
	Попытка
		// Включение режима сравнения
		РежимСравнения = Истина;
		
		// Расчет периодов для сравнения
		ПериодыСравнения = РассчитатьПериодыДляСравнения();
		
		// Формирование строк периодов для отображения
		ТекущийПериодСтрока = СтрШаблон("Текущий: %1 - %2", 
			Формат(ПериодыСравнения.ТекущийПериод.НачалоПериода, "ДФ=dd.MM.yyyy"), 
			Формат(ПериодыСравнения.ТекущийПериод.КонецПериода, "ДФ=dd.MM.yyyy"));
		
		ПрошлыйПериодСтрока = СтрШаблон("Прошлый: %1 - %2", 
			Формат(ПериодыСравнения.ПрошлыйПериод.НачалоПериода, "ДФ=dd.MM.yyyy"), 
			Формат(ПериодыСравнения.ПрошлыйПериод.КонецПериода, "ДФ=dd.MM.yyyy"));
		
		// Получение данных за оба периода
		ДанныеСравнения = ПолучитьДанныеДляСравнения(ПериодыСравнения);
		
		// Расчет изменений
		ИзмененияПоказателей = РассчитатьИзмененияПоказателей(ДанныеСравнения);
		
		// Визуализация на форме
		ВизуализироватьРезультатыСравнения(ИзмененияПоказателей);
		
		// Показать группу сравнения периодов
		Элементы.ГруппаПериодСравнения.Видимость = Истина;
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ДашбордKPI.СравнениеПериодов", 
			УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Сообщить("Ошибка при сравнении периодов: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		РежимСравнения = Ложь;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьПериодыДляСравнения()
	
	ПериодыСравнения = Новый Структура;
	
	// Текущий период
	ТекущийПериод = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ПериодыСравнения.Вставить("ТекущийПериод", ТекущийПериод);
	
	// Определение типа периода и расчет предыдущего
	ДлительностьПериода = КонецПериода - НачалоПериода + 1;
	
	Если ДлительностьПериода <= 1 Тогда
		// Один день - сравниваем с предыдущим днем
		НачалоПрошлогоПериода = НачалоПериода - 1;
		КонецПрошлогоПериода = КонецПериода - 1;
	ИначеЕсли ДлительностьПериода <= 7 * 86400 Тогда
		// Неделя - сравниваем с предыдущей неделей
		НачалоПрошлогоПериода = НачалоПериода - 7;
		КонецПрошлогоПериода = КонецПериода - 7;
	ИначеЕсли ДлительностьПериода <= 31 * 86400 Тогда
		// Месяц - сравниваем с предыдущим месяцем
		НачалоПрошлогоПериода = ДобавитьМесяц(НачалоПериода, -1);
		КонецПрошлогоПериода = ДобавитьМесяц(КонецПериода, -1);
	ИначеЕсли ДлительностьПериода <= 93 * 86400 Тогда
		// Квартал - сравниваем с предыдущим кварталом
		НачалоПрошлогоПериода = ДобавитьМесяц(НачалоПериода, -3);
		КонецПрошлогоПериода = ДобавитьМесяц(КонецПериода, -3);
	Иначе
		// Год или больше - сравниваем с предыдущим годом
		НачалоПрошлогоПериода = ДобавитьМесяц(НачалоПериода, -12);
		КонецПрошлогоПериода = ДобавитьМесяц(КонецПериода, -12);
	КонецЕсли;
	
	ПрошлыйПериод = Новый Структура("НачалоПериода, КонецПериода", НачалоПрошлогоПериода, КонецПрошлогоПериода);
	ПериодыСравнения.Вставить("ПрошлыйПериод", ПрошлыйПериод);
	
	Возврат ПериодыСравнения;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляСравнения(ПериодыСравнения)
	
	ДанныеСравнения = Новый Структура;
	
	// Получаем данные за текущий период
	ДанныеТекущегоПериода = ПолучитьДанныеПоказателейЗаПериод(
		ПериодыСравнения.ТекущийПериод.НачалоПериода,
		ПериодыСравнения.ТекущийПериод.КонецПериода);
	ДанныеСравнения.Вставить("ТекущийПериод", ДанныеТекущегоПериода);
	
	// Получаем данные за прошлый период
	ДанныеПрошлогоПериода = ПолучитьДанныеПоказателейЗаПериод(
		ПериодыСравнения.ПрошлыйПериод.НачалоПериода,
		ПериодыСравнения.ПрошлыйПериод.КонецПериода);
	ДанныеСравнения.Вставить("ПрошлыйПериод", ДанныеПрошлогоПериода);
	
	Возврат ДанныеСравнения;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПоказателейЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета)
	
	Показатели = Новый Структура;
	
	// Продажи
	ДанныеПродаж = ПолучитьДанныеПродажЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета);
	Показатели.Вставить("Выручка", ДанныеПродаж.Выручка);
	Показатели.Вставить("КоличествоПродаж", ДанныеПродаж.КоличествоПродаж);
	Показатели.Вставить("СреднийЧек", ДанныеПродаж.СреднийЧек);
	
	// Прибыльность
	ДанныеПрибыльности = ПолучитьДанныеПрибыльностиЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета);
	Показатели.Вставить("ВаловаяПрибыль", ДанныеПрибыльности.ВаловаяПрибыль);
	Показатели.Вставить("РентабельностьПродаж", ДанныеПрибыльности.РентабельностьПродаж);
	Показатели.Вставить("ОперационнаяПрибыль", ДанныеПрибыльности.ОперационнаяПрибыль);
	Показатели.Вставить("РентабельностьОперационная", ДанныеПрибыльности.РентабельностьОперационная);
	Показатели.Вставить("ЧистаяПрибыль", ДанныеПрибыльности.ЧистаяПрибыль);
	Показатели.Вставить("РентабельностьЧистая", ДанныеПрибыльности.РентабельностьЧистая);
	
	// Взаиморасчеты
	ДанныеВзаиморасчетов = ПолучитьДанныеВзаиморасчетовЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета);
	Показатели.Вставить("ДебиторскаяЗадолженность", ДанныеВзаиморасчетов.ДебиторскаяЗадолженность);
	Показатели.Вставить("КредиторскаяЗадолженность", ДанныеВзаиморасчетов.КредиторскаяЗадолженность);
	Показатели.Вставить("ПросроченнаяДебиторская", ДанныеВзаиморасчетов.ПросроченнаяДебиторская);
	Показатели.Вставить("ДоляПросроченной", ДанныеВзаиморасчетов.ДоляПросроченной);
	Показатели.Вставить("DSO", ДанныеВзаиморасчетов.DSO);
	Показатели.Вставить("DPO", ДанныеВзаиморасчетов.DPO);
	
	// Запасы
	ДанныеЗапасов = ПолучитьДанныеЗапасовЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета);
	Показатели.Вставить("СтоимостьЗапасов", ДанныеЗапасов.СтоимостьЗапасов);
	Показатели.Вставить("Оборачиваемость", ДанныеЗапасов.Оборачиваемость);
	Показатели.Вставить("ДнейЗапаса", ДанныеЗапасов.ДнейЗапаса);
	Показатели.Вставить("ВыполнениеЗаказов", ДанныеЗапасов.ВыполнениеЗаказов);
	
	// Денежные потоки (если есть вкладка)
	ДанныеДенежныхПотоков = ПолучитьДанныеДенежныхПотоковЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета);
	Показатели.Вставить("ОперационныйПоток", ДанныеДенежныхПотоков.ОперационныйПоток);
	Показатели.Вставить("ИнвестиционныйПоток", ДанныеДенежныхПотоков.ИнвестиционныйПоток);
	Показатели.Вставить("ФинансовыйПоток", ДанныеДенежныхПотоков.ФинансовыйПоток);
	Показатели.Вставить("СвободныйДенежныйПоток", ДанныеДенежныхПотоков.СвободныйДенежныйПоток);
	
	Возврат Показатели;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПродажЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета)
	
	// Получение схемы компоновки данных
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Продажи");
	
	// Настройка компоновщика
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Установка параметров периода
	УстановитьПараметрКомпоновки(КомпоновщикНастроек.Настройки, "НачалоПериода", НачалоПериодаРасчета);
	УстановитьПараметрКомпоновки(КомпоновщикНастроек.Настройки, "КонецПериода", КонецПериодаРасчета);
	
	// Установка текущих отборов
	УстановитьОтборыКомпоновки(КомпоновщикНастроек.Настройки);
	
	// Выполнение компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки());
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	РезультатЗначений = Новый РезультатКомпоновкиДанных;
	ПроцессорВыводаЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаЗначений.УстановитьОбъект(РезультатЗначений);
	ПроцессорВыводаЗначений.Вывести(ПроцессорКомпоновки);
	
	// Извлечение итоговых значений
	ДанныеПродаж = Новый Структура;
	ДанныеПродаж.Вставить("Выручка", 0);
	ДанныеПродаж.Вставить("КоличествоПродаж", 0);
	ДанныеПродаж.Вставить("СреднийЧек", 0);
	
	Для Каждого ЭлементРезультата Из РезультатЗначений Цикл
		Если ТипЗнч(ЭлементРезультата) = Тип("СтрокаРезультатаКомпоновкиДанных") И ЭлементРезультата.УровеньВГруппировке = 0 Тогда
			Для Каждого ЭлементСтроки Из ЭлементРезультата.ЗначенияПолей.Элементы Цикл
				ИмяПоля = Строка(ЭлементСтроки.Поле);
				Если ИмяПоля = "Выручка" Тогда
					ДанныеПродаж.Выручка = ЭлементСтроки.Значение;
				ИначеЕсли ИмяПоля = "КоличествоПродаж" Тогда
					ДанныеПродаж.КоличествоПродаж = ЭлементСтроки.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Расчет среднего чека
	Если ДанныеПродаж.КоличествоПродаж > 0 Тогда
		ДанныеПродаж.СреднийЧек = ДанныеПродаж.Выручка / ДанныеПродаж.КоличествоПродаж;
	КонецЕсли;
	
	Возврат ДанныеПродаж;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПрибыльностиЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета)
	
	// Аналогично получению данных продаж, но для схемы прибыльности
	ИмяМакета = ?(ФайлСуществует("skd_profit_extended.xml"), "СКД_ПрибыльностьРасширенная", "СКД_Прибыльность");
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет(ИмяМакета);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	УстановитьПараметрКомпоновки(КомпоновщикНастроек.Настройки, "НачалоПериода", НачалоПериодаРасчета);
	УстановитьПараметрКомпоновки(КомпоновщикНастроек.Настройки, "КонецПериода", КонецПериодаРасчета);
	УстановитьОтборыКомпоновки(КомпоновщикНастроек.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки());
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	РезультатЗначений = Новый РезультатКомпоновкиДанных;
	ПроцессорВыводаЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаЗначений.УстановитьОбъект(РезультатЗначений);
	ПроцессорВыводаЗначений.Вывести(ПроцессорКомпоновки);
	
	ДанныеПрибыльности = Новый Структура;
	ДанныеПрибыльности.Вставить("ВаловаяПрибыль", 0);
	ДанныеПрибыльности.Вставить("РентабельностьПродаж", 0);
	ДанныеПрибыльности.Вставить("ОперационнаяПрибыль", 0);
	ДанныеПрибыльности.Вставить("РентабельностьОперационная", 0);
	ДанныеПрибыльности.Вставить("ЧистаяПрибыль", 0);
	ДанныеПрибыльности.Вставить("РентабельностьЧистая", 0);
	
	Для Каждого ЭлементРезультата Из РезультатЗначений Цикл
		Если ТипЗнч(ЭлементРезультата) = Тип("СтрокаРезультатаКомпоновкиДанных") И ЭлементРезультата.УровеньВГруппировке = 0 Тогда
			Для Каждого ЭлементСтроки Из ЭлементРезультата.ЗначенияПолей.Элементы Цикл
				ИмяПоля = Строка(ЭлементСтроки.Поле);
				Если ДанныеПрибыльности.Свойство(ИмяПоля) Тогда
					ДанныеПрибыльности[ИмяПоля] = ЭлементСтроки.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеПрибыльности;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеВзаиморасчетовЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета)
	
	// Аналогично, но для взаиморасчетов
	ИмяМакета = ?(ФайлСуществует("skd_settlements_extended.xml"), "СКД_ВзаиморасчетыРасширенные", "СКД_Взаиморасчеты");
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет(ИмяМакета);
	
	// ... выполнение компоновки аналогично ...
	
	ДанныеВзаиморасчетов = Новый Структура;
	ДанныеВзаиморасчетов.Вставить("ДебиторскаяЗадолженность", 0);
	ДанныеВзаиморасчетов.Вставить("КредиторскаяЗадолженность", 0);
	ДанныеВзаиморасчетов.Вставить("ПросроченнаяДебиторская", 0);
	ДанныеВзаиморасчетов.Вставить("ДоляПросроченной", 0);
	ДанныеВзаиморасчетов.Вставить("DSO", 0);
	ДанныеВзаиморасчетов.Вставить("DPO", 0);
	
	// ... заполнение данных из результата ...
	
	Возврат ДанныеВзаиморасчетов;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеЗапасовЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета)
	
	ДанныеЗапасов = Новый Структура;
	ДанныеЗапасов.Вставить("СтоимостьЗапасов", 0);
	ДанныеЗапасов.Вставить("Оборачиваемость", 0);
	ДанныеЗапасов.Вставить("ДнейЗапаса", 0);
	ДанныеЗапасов.Вставить("ВыполнениеЗаказов", 95); // Заглушка
	
	Возврат ДанныеЗапасов;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДенежныхПотоковЗаПериод(НачалоПериодаРасчета, КонецПериодаРасчета)
	
	ДанныеДенежныхПотоков = Новый Структура;
	ДанныеДенежныхПотоков.Вставить("ОперационныйПоток", 0);
	ДанныеДенежныхПотоков.Вставить("ИнвестиционныйПоток", 0);
	ДанныеДенежныхПотоков.Вставить("ФинансовыйПоток", 0);
	ДанныеДенежныхПотоков.Вставить("СвободныйДенежныйПоток", 0);
	
	// Если есть схема денежных потоков
	Если ФайлСуществует("skd_cashflow.xml") Тогда
		СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_ДенежныеПотоки");
		// ... выполнение компоновки ...
	КонецЕсли;
	
	Возврат ДанныеДенежныхПотоков;
	
КонецФункции

&НаСервере
Функция РассчитатьИзмененияПоказателей(ДанныеСравнения)
	
	ИзмененияПоказателей = Новый Структура;
	
	ТекущиеДанные = ДанныеСравнения.ТекущийПериод;
	ПрошлыеДанные = ДанныеСравнения.ПрошлыйПериод;
	
	// Для каждого показателя рассчитываем изменение
	Для Каждого КлючЗначение Из ТекущиеДанные Цикл
		ИмяПоказателя = КлючЗначение.Ключ;
		ТекущееЗначение = КлючЗначение.Значение;
		ПрошлоеЗначение = ПрошлыеДанные[ИмяПоказателя];
		
		Изменение = РассчитатьИзменение(ИмяПоказателя, ТекущееЗначение, ПрошлоеЗначение);
		ИзмененияПоказателей.Вставить(ИмяПоказателя, Изменение);
	КонецЦикла;
	
	Возврат ИзмененияПоказателей;
	
КонецФункции

&НаСервере
Функция РассчитатьИзменение(ИмяПоказателя, ТекущееЗначение, ПрошлоеЗначение)
	
	Изменение = Новый Структура;
	Изменение.Вставить("ТекущееЗначение", ТекущееЗначение);
	Изменение.Вставить("ПрошлоеЗначение", ПрошлоеЗначение);
	Изменение.Вставить("АбсолютноеИзменение", ТекущееЗначение - ПрошлоеЗначение);
	
	// Расчет процентного изменения
	Если ПрошлоеЗначение = 0 Тогда
		Если ТекущееЗначение = 0 Тогда
			Изменение.Вставить("ПроцентноеИзменение", 0);
		Иначе
			Изменение.Вставить("ПроцентноеИзменение", 100);
		КонецЕсли;
	Иначе
		Изменение.Вставить("ПроцентноеИзменение", (ТекущееЗначение - ПрошлоеЗначение) / ПрошлоеЗначение * 100);
	КонецЕсли;
	
	// Определение направления изменения
	Если Изменение.АбсолютноеИзменение > 0 Тогда
		Изменение.Вставить("Направление", "Рост");
	ИначеЕсли Изменение.АбсолютноеИзменение < 0 Тогда
		Изменение.Вставить("Направление", "Снижение");
	Иначе
		Изменение.Вставить("Направление", "БезИзменений");
	КонецЕсли;
	
	// Определение обратной логики для некоторых показателей
	ОбратнаяЛогика = ОпределитьОбратнуюЛогикуПоказателя(ИмяПоказателя);
	Изменение.Вставить("ОбратнаяЛогика", ОбратнаяЛогика);
	
	// Определение оценки изменения (хорошо/плохо)
	Если Изменение.Направление = "БезИзменений" Тогда
		Изменение.Вставить("Оценка", "Нейтрально");
	ИначеЕсли (Изменение.Направление = "Рост" И НЕ ОбратнаяЛогика) ИЛИ (Изменение.Направление = "Снижение" И ОбратнаяЛогика) Тогда
		Изменение.Вставить("Оценка", "Положительно");
	Иначе
		Изменение.Вставить("Оценка", "Отрицательно");
	КонецЕсли;
	
	Возврат Изменение;
	
КонецФункции

&НаСервере
Функция ОпределитьОбратнуюЛогикуПоказателя(ИмяПоказателя)
	
	// Показатели, для которых снижение - это хорошо
	ПоказателиСОбратнойЛогикой = Новый Массив;
	ПоказателиСОбратнойЛогикой.Добавить("ДебиторскаяЗадолженность");
	ПоказателиСОбратнойЛогикой.Добавить("КредиторскаяЗадолженность");
	ПоказателиСОбратнойЛогикой.Добавить("ПросроченнаяДебиторская");
	ПоказателиСОбратнойЛогикой.Добавить("ДоляПросроченной");
	ПоказателиСОбратнойЛогикой.Добавить("DSO");
	ПоказателиСОбратнойЛогикой.Добавить("DPO");
	ПоказателиСОбратнойЛогикой.Добавить("ДнейЗапаса");
	
	Возврат ПоказателиСОбратнойЛогикой.Найти(ИмяПоказателя) <> Неопределено;
	
КонецФункции

&НаСервере
Процедура ВизуализироватьРезультатыСравнения(ИзмененияПоказателей)
	
	// Продажи
	ВизуализироватьИзменениеПоказателя("Выручка", ИзмененияПоказателей.Выручка, "СтрелкаВыручка", "ИзменениеВыручка");
	ВизуализироватьИзменениеПоказателя("СреднийЧек", ИзмененияПоказателей.СреднийЧек, "СтрелкаСреднийЧек", "ИзменениеСреднийЧек");
	ВизуализироватьИзменениеПоказателя("КоличествоПродаж", ИзмененияПоказателей.КоличествоПродаж, "СтрелкаКоличествоПродаж", "ИзменениеКоличествоПродаж");
	
	// Прибыльность
	ВизуализироватьИзменениеПоказателя("ВаловаяПрибыль", ИзмененияПоказателей.ВаловаяПрибыль, "СтрелкаВаловаяПрибыль", "ИзменениеВаловаяПрибыль");
	ВизуализироватьИзменениеПоказателя("РентабельностьПродаж", ИзмененияПоказателей.РентабельностьПродаж, "СтрелкаРентабельностьПродаж", "ИзменениеРентабельностьПродаж");
	
	Если ИзмененияПоказателей.Свойство("ОперационнаяПрибыль") Тогда
		ВизуализироватьИзменениеПоказателя("ОперационнаяПрибыль", ИзмененияПоказателей.ОперационнаяПрибыль, "СтрелкаОперационнаяПрибыль", "ИзменениеОперационнаяПрибыль");
		ВизуализироватьИзменениеПоказателя("ЧистаяПрибыль", ИзмененияПоказателей.ЧистаяПрибыль, "СтрелкаЧистаяПрибыль", "ИзменениеЧистаяПрибыль");
	КонецЕсли;
	
	// Взаиморасчеты
	ВизуализироватьИзменениеПоказателя("ДебиторскаяЗадолженность", ИзмененияПоказателей.ДебиторскаяЗадолженность, "СтрелкаДебиторская", "ИзменениеДебиторская");
	ВизуализироватьИзменениеПоказателя("ПросроченнаяДебиторская", ИзмененияПоказателей.ПросроченнаяДебиторская, "СтрелкаПросроченная", "ИзменениеПросроченная");
	ВизуализироватьИзменениеПоказателя("DSO", ИзмененияПоказателей.DSO, "СтрелкаDSO", "ИзменениеDSO");
	
	Если ИзмененияПоказателей.Свойство("DPO") Тогда
		ВизуализироватьИзменениеПоказателя("DPO", ИзмененияПоказателей.DPO, "СтрелкаDPO", "ИзменениеDPO");
	КонецЕсли;
	
	// Запасы
	ВизуализироватьИзменениеПоказателя("СтоимостьЗапасов", ИзмененияПоказателей.СтоимостьЗапасов, "СтрелкаСтоимостьЗапасов", "ИзменениеСтоимостьЗапасов");
	ВизуализироватьИзменениеПоказателя("Оборачиваемость", ИзмененияПоказателей.Оборачиваемость, "СтрелкаОборачиваемость", "ИзменениеОборачиваемость");
	ВизуализироватьИзменениеПоказателя("ДнейЗапаса", ИзмененияПоказателей.ДнейЗапаса, "СтрелкаДнейЗапаса", "ИзменениеДнейЗапаса");
	
	// Денежные потоки
	Если ИзмененияПоказателей.Свойство("ОперационныйПоток") Тогда
		ВизуализироватьИзменениеПоказателя("ОперационныйПоток", ИзмененияПоказателей.ОперационныйПоток, "СтрелкаОперационныйПоток", "ИзменениеОперационныйПоток");
		ВизуализироватьИзменениеПоказателя("СвободныйДенежныйПоток", ИзмененияПоказателей.СвободныйДенежныйПоток, "СтрелкаСвободныйДенежныйПоток", "ИзменениеСвободныйДенежныйПоток");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВизуализироватьИзменениеПоказателя(ИмяПоказателя, ДанныеИзменения, ИмяСтрелки, ИмяТекстаИзменения)
	
	// Проверка существования элементов формы
	ЭлементСтрелка = Элементы.Найти(ИмяСтрелки);
	ЭлементТекст = Элементы.Найти(ИмяТекстаИзменения);
	
	Если ЭлементСтрелка = Неопределено ИЛИ ЭлементТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение картинки и цвета
	Если ДанныеИзменения.Оценка = "Положительно" Тогда
		Если ДанныеИзменения.Направление = "Рост" Тогда
			Картинка = БиблиотекаКартинок.СтрелкаВверхЗеленая;
		Иначе
			Картинка = БиблиотекаКартинок.СтрелкаВнизЗеленая;
		КонецЕсли;
		Цвет = Новый Цвет(0, 128, 0);
	ИначеЕсли ДанныеИзменения.Оценка = "Отрицательно" Тогда
		Если ДанныеИзменения.Направление = "Рост" Тогда
			Картинка = БиблиотекаКартинок.СтрелкаВверхКрасная;
		Иначе
			Картинка = БиблиотекаКартинок.СтрелкаВнизКрасная;
		КонецЕсли;
		Цвет = Новый Цвет(255, 0, 0);
	Иначе
		Картинка = БиблиотекаКартинок.РавноСерое;
		Цвет = Новый Цвет(128, 128, 128);
	КонецЕсли;
	
	// Установка значений
	ЭлементСтрелка.Видимость = Истина;
	ЭлементСтрелка.Картинка = Картинка;
	
	ЭлементТекст.Видимость = Истина;
	
	// Форматирование текста изменения
	Знак = ?(ДанныеИзменения.АбсолютноеИзменение >= 0, "+", "");
	ТекстИзменения = СтрШаблон("%1%2%% (%3%4)", 
		Знак, 
		Формат(ДанныеИзменения.ПроцентноеИзменение, "ЧДЦ=1"), 
		Знак, 
		Формат(ДанныеИзменения.АбсолютноеИзменение, "ЧДЦ=0; ЧРГ=' '"));
	
	ЭлементТекст.Заголовок = ТекстИзменения;
	ЭлементТекст.ЦветТекста = Цвет;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыКомпоновки(Настройки)
	
	// Установка отборов из текущих параметров формы
	Если ЗначениеЗаполнено(Организация) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Контрагент", Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Менеджер) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Менеджер", Менеджер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		ДобавитьОтбор(Настройки.Отбор, "ГруппаНоменклатуры", ГруппаНоменклатуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Склад", Склад);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСравнение(Команда)
	
	РежимСравнения = Ложь;
	Элементы.ГруппаПериодСравнения.Видимость = Ложь;
	
	// Скрыть все элементы сравнения
	СкрытьВсеЭлементыСравнения();
	
	// Обновить данные для возврата к обычному режиму
	ОбновитьДанныеНаСервереАсинхронно();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВсеЭлементыСравнения()
	
	// Скрываем все элементы сравнения через поиск по шаблону имени
	Для Каждого Элемент Из Элементы Цикл
		Если СтрНайти(Элемент.Имя, "Стрелка") = 1 ИЛИ СтрНайти(Элемент.Имя, "Изменение") = 1 Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ФайлСуществует(ИмяФайла)
	// Проверка существования макета
	Попытка
		Макет = Обработки.ДКП_ДашбордKPI.ПолучитьМакет(СтрЗаменить(ИмяФайла, ".xml", ""));
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

#КонецОбласти