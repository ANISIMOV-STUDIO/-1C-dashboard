// Расширенный модуль формы дашборда KPI с полным функционалом
// Часть 1: Основные процедуры и обработка ошибок

#Область ПеременныеМодуля

// Переменные для работы с фоновыми заданиями
Перем ИдентификаторФоновогоЗадания;
Перем АдресВременногоХранилища;

// Переменные для режима сравнения
Перем РежимСравнения;
Перем ДанныеСравнения;

// Переменные для персонализации
Перем НастройкиПользователя;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Попытка
		// Установка периода по умолчанию - текущий месяц
		НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецПериода = КонецДня(КонецМесяца(ТекущаяДата()));
		
		// Загрузка настроек пользователя
		ЗагрузитьНастройкиПользователя();
		
		// Инициализация данных при открытии
		Если НастройкиПользователя.АвтообновлениеПриОткрытии Тогда
			ОбновитьДанныеНаСервере();
		КонецЕсли;
		
		// Настройка видимости элементов в зависимости от прав
		НастроитьВидимостьЭлементовПоПравам();
		
		// Инициализация спарклайнов
		ИнициализироватьСпарклайны();
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ДашбордKPI.Инициализация", 
			УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Сообщить("Ошибка при инициализации дашборда: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Установка заголовка формы
	Заголовок = СтрШаблон("Дашборд KPI за период с %1 по %2", 
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), 
		Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	
	// Запуск автообновления если настроено
	Если НастройкиПользователя.АвтообновлениеВключено Тогда
		ПодключитьОбработчикОжидания("АвтообновлениеДанных", 
			НастройкиПользователя.ИнтервалАвтообновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Отмена фонового задания если оно выполняется
	Если ИдентификаторФоновогоЗадания <> Неопределено Тогда
		ОтменитьФоновоеЗаданиеНаСервере();
	КонецЕсли;
	
	// Сохранение настроек пользователя
	СохранитьНастройкиПользователяНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыФильтры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ОбновитьДанныеАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	ОбновитьДанныеАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПериодПриИзменении(Элемент)
	УстановитьБыстрыйПериод();
	ОбновитьДанныеАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьДанныеАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ОбновитьДанныеАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ОбновитьДанныеАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	ОбновитьДанныеАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНоменклатурыПриИзменении(Элемент)
	ОбновитьДанныеАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ОбновитьДанныеАсинхронно();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДанныеАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСПрошлымПериодом(Команда)
	СравнитьСПрошлымПериодомАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВExcel(Команда)
	ЭкспортДанныхВExcel();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДашборда(Команда)
	ОткрытьФормуНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ПолноэкранныйРежим(Команда)
	ПереключитьПолноэкранныйРежим();
КонецПроцедуры

#КонецОбласти

#Область ОсновныеПроцедурыОбновленияДанных

&НаКлиенте
Процедура ОбновитьДанныеАсинхронно()
	
	// Проверка валидности периода
	Если НачалоПериода > КонецПериода Тогда
		ПоказатьПредупреждение(, "Начало периода не может быть больше окончания периода!");
		Возврат;
	КонецЕсли;
	
	// Запуск фонового обновления
	РезультатЗапуска = ЗапуститьФоновоеОбновлениеНаСервере();
	
	Если РезультатЗапуска.ЗаданиеВыполнено Тогда
		// Если задание выполнилось быстро
		ОбработатьРезультатФоновогоЗадания();
	Иначе
		// Показываем индикатор загрузки
		ПоказатьИндикаторЗагрузки(Истина);
		
		// Подключаем обработчик проверки состояния
		ПодключитьОбработчикОжидания("ПроверитьСостояниеФоновогоЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеОбновлениеНаСервере()
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаданиеВыполнено", Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	Результат.Вставить("АдресРезультата", "");
	
	Попытка
		// Подготовка параметров для фонового задания
		ПараметрыОбновления = СобратьПараметрыОбновления();
		
		// Помещаем параметры во временное хранилище
		АдресПараметров = ПоместитьВоВременноеХранилище(ПараметрыОбновления, УникальныйИдентификатор);
		
		// Параметры фонового задания
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(АдресПараметров);
		ПараметрыВыполнения.Добавить(УникальныйИдентификатор);
		
		// Запуск фонового задания
		Задание = ФоновыеЗадания.Выполнить(
			"Обработки.ДКП_ДашбордKPI.ВыполнитьОбновлениеДанныхВФоне",
			ПараметрыВыполнения,
			,
			"Обновление данных дашборда KPI");
		
		ИдентификаторФоновогоЗадания = Задание.УникальныйИдентификатор;
		Результат.ИдентификаторЗадания = ИдентификаторФоновогоЗадания;
		
		// Проверяем, может быть задание уже выполнилось
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			АдресВременногоХранилища = Задание.АдресРезультата;
			Результат.ЗаданиеВыполнено = Истина;
			Результат.АдресРезультата = АдресВременногоХранилища;
		КонецЕсли;
		
	Исключение
		ОбработатьОшибку("ЗапускФоновогоЗадания", ИнформацияОбОшибке());
		
		// При ошибке запуска фонового задания выполняем обновление синхронно
		ОбновитьДанныеНаСервере();
		Результат.ЗаданиеВыполнено = Истина;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СобратьПараметрыОбновления()
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыОбновления.Вставить("КонецПериода", КонецПериода);
	ПараметрыОбновления.Вставить("Организация", Организация);
	ПараметрыОбновления.Вставить("Контрагент", Контрагент);
	ПараметрыОбновления.Вставить("Менеджер", Менеджер);
	ПараметрыОбновления.Вставить("Номенклатура", Номенклатура);
	ПараметрыОбновления.Вставить("ГруппаНоменклатуры", ГруппаНоменклатуры);
	ПараметрыОбновления.Вставить("Склад", Склад);
	ПараметрыОбновления.Вставить("РежимСравнения", РежимСравнения);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	Попытка
		// Обновление данных продаж
		ОбновитьДанныеПродаж();
		
		// Обновление данных прибыльности
		ОбновитьДанныеПрибыльности();
		
		// Обновление данных взаиморасчетов
		ОбновитьДанныеВзаиморасчетов();
		
		// Обновление данных запасов
		ОбновитьДанныеЗапасов();
		
		// Обновление данных денежных потоков
		Если Элементы.Найти("СтраницаДенежныеПотоки") <> Неопределено Тогда
			ОбновитьДанныеДенежныхПотоков();
		КонецЕсли;
		
		// Обновление главной страницы
		ОбновитьГлавнуюСтраницу();
		
		// Обновление заголовка формы
		Заголовок = СтрШаблон("Дашборд KPI за период с %1 по %2", 
			Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), 
			Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
			
	Исключение
		ОбработатьОшибку("ОбновлениеДанных", ИнформацияОбОшибке());
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОшибок

&НаСервере
Процедура ОбработатьОшибку(ИмяОперации, ИнформацияОбОшибке)
	
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	// Запись в журнал регистрации
	ЗаписьЖурналаРегистрации("ДашбордKPI." + ИмяОперации, 
		УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	
	// Формирование понятного сообщения для пользователя
	ТекстДляПользователя = СформироватьТекстОшибкиДляПользователя(ИмяОперации, ИнформацияОбОшибке);
	
	// Вывод сообщения
	Сообщить(ТекстДляПользователя);
	
	// Отправка уведомления администратору (если настроено)
	Если НастройкиПользователя.ОтправлятьУведомленияОбОшибках Тогда
		ОтправитьУведомлениеОбОшибке(ИмяОперации, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстОшибкиДляПользователя(ИмяОперации, ИнформацияОбОшибке)
	
	ТекстБазовый = "";
	
	Если ИмяОперации = "ЗапускФоновогоЗадания" Тогда
		ТекстБазовый = "Не удалось запустить обновление данных в фоновом режиме. Данные обновлены в обычном режиме.";
	ИначеЕсли ИмяОперации = "ОбновлениеДанных" Тогда
		ТекстБазовый = "Ошибка при обновлении данных дашборда.";
	ИначеЕсли ИмяОперации = "СравнениеПериодов" Тогда
		ТекстБазовый = "Ошибка при сравнении периодов.";
	ИначеЕсли ИмяОперации = "ЭкспортДанных" Тогда
		ТекстБазовый = "Ошибка при экспорте данных.";
	Иначе
		ТекстБазовый = "Произошла ошибка при выполнении операции.";
	КонецЕсли;
	
	// Добавляем детали для технических пользователей
	Если ПравоДоступа("АдминистрированиеДанных", Метаданные) Тогда
		ТекстБазовый = ТекстБазовый + Символы.ПС + "Техническая информация: " + 
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	Возврат ТекстБазовый;
	
КонецФункции

&НаСервере
Процедура ОтправитьУведомлениеОбОшибке(ИмяОперации, ТекстОшибки)
	
	// Здесь можно реализовать отправку email или другое уведомление
	// Например, через регламентное задание или очередь сообщений
	
КонецПроцедуры

#КонецОбласти

#Область БыстрыеПериоды

&НаКлиенте
Процедура УстановитьБыстрыйПериод()
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	
	Если БыстрыйПериод = "Сегодня" Тогда
		НачалоПериода = ТекущаяДата;
		КонецПериода = КонецДня(ТекущаяДата);
	ИначеЕсли БыстрыйПериод = "Вчера" Тогда
		НачалоПериода = ТекущаяДата - 86400;
		КонецПериода = КонецДня(ТекущаяДата - 86400);
	ИначеЕсли БыстрыйПериод = "НеделяТекущая" Тогда
		НачалоПериода = НачалоНедели(ТекущаяДата);
		КонецПериода = КонецДня(КонецНедели(ТекущаяДата));
	ИначеЕсли БыстрыйПериод = "НеделяПрошлая" Тогда
		НачалоПериода = НачалоНедели(ТекущаяДата - 7 * 86400);
		КонецПериода = КонецДня(КонецНедели(ТекущаяДата - 7 * 86400));
	ИначеЕсли БыстрыйПериод = "МесяцТекущий" Тогда
		НачалоПериода = НачалоМесяца(ТекущаяДата);
		КонецПериода = КонецДня(КонецМесяца(ТекущаяДата));
	ИначеЕсли БыстрыйПериод = "МесяцПрошлый" Тогда
		НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
		КонецПериода = КонецДня(КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
	ИначеЕсли БыстрыйПериод = "КварталТекущий" Тогда
		НачалоПериода = НачалоКвартала(ТекущаяДата);
		КонецПериода = КонецДня(КонецКвартала(ТекущаяДата));
	ИначеЕсли БыстрыйПериод = "КварталПрошлый" Тогда
		НачалоПериода = НачалоКвартала(ДобавитьМесяц(ТекущаяДата, -3));
		КонецПериода = КонецДня(КонецКвартала(ДобавитьМесяц(ТекущаяДата, -3)));
	ИначеЕсли БыстрыйПериод = "ГодТекущий" Тогда
		НачалоПериода = НачалоГода(ТекущаяДата);
		КонецПериода = КонецДня(КонецГода(ТекущаяДата));
	ИначеЕсли БыстрыйПериод = "ГодПрошлый" Тогда
		НачалоПериода = НачалоГода(ДобавитьМесяц(ТекущаяДата, -12));
		КонецПериода = КонецДня(КонецГода(ДобавитьМесяц(ТекущаяДата, -12)));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти