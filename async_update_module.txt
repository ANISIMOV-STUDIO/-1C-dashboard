// Модуль асинхронного обновления данных через фоновые задания
// Заменяет устаревший подход с ПодключитьОбработчикОжидания

#Область АсинхронноеОбновлениеДанных

// Переменные модуля формы для работы с фоновыми заданиями
Перем ИдентификаторФоновогоЗадания;
Перем АдресВременногоХранилища;

&НаКлиенте
Процедура ОбновитьДанныеАсинхронно() Экспорт
	
	// Запуск фонового задания на сервере
	РезультатЗапуска = ЗапуститьФоновоеОбновлениеНаСервере();
	
	Если РезультатЗапуска.ЗаданиеВыполнено Тогда
		// Если задание выполнилось быстро (например, мало данных)
		ОбработатьРезультатФоновогоЗадания();
	Иначе
		// Показываем индикатор загрузки
		ПоказатьИндикаторЗагрузки(Истина);
		
		// Подключаем обработчик проверки состояния
		ПодключитьОбработчикОжидания("ПроверитьСостояниеФоновогоЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеОбновлениеНаСервере()
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаданиеВыполнено", Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	Результат.Вставить("АдресРезультата", "");
	
	Попытка
		// Подготовка параметров для фонового задания
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыОбновления.Вставить("КонецПериода", КонецПериода);
		ПараметрыОбновления.Вставить("Организация", Организация);
		ПараметрыОбновления.Вставить("Контрагент", Контрагент);
		ПараметрыОбновления.Вставить("Менеджер", Менеджер);
		ПараметрыОбновления.Вставить("Номенклатура", Номенклатура);
		ПараметрыОбновления.Вставить("ГруппаНоменклатуры", ГруппаНоменклатуры);
		ПараметрыОбновления.Вставить("Склад", Склад);
		
		// Помещаем параметры во временное хранилище
		АдресПараметров = ПоместитьВоВременноеХранилище(ПараметрыОбновления, УникальныйИдентификатор);
		
		// Параметры фонового задания
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(АдресПараметров);
		ПараметрыВыполнения.Добавить(УникальныйИдентификатор);
		
		// Запуск фонового задания
		Задание = ФоновыеЗадания.Выполнить(
			"Обработки.ДКП_ДашбордKPI.ВыполнитьОбновлениеДанныхВФоне",
			ПараметрыВыполнения,
			,
			"Обновление данных дашборда KPI");
		
		ИдентификаторФоновогоЗадания = Задание.УникальныйИдентификатор;
		Результат.ИдентификаторЗадания = ИдентификаторФоновогоЗадания;
		
		// Проверяем, может быть задание уже выполнилось
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			АдресВременногоХранилища = Задание.АдресРезультата;
			Результат.ЗаданиеВыполнено = Истина;
			Результат.АдресРезультата = АдресВременногоХранилища;
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ДашбордKPI.ФоновоеОбновление", 
			УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		// При ошибке запуска фонового задания выполняем обновление синхронно
		ОбновитьДанныеНаСервере();
		Результат.ЗаданиеВыполнено = Истина;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьСостояниеФоновогоЗадания()
	
	РезультатПроверки = ПроверитьФоновоеЗаданиеНаСервере();
	
	Если РезультатПроверки.Выполнено Тогда
		// Отключаем обработчик ожидания
		ОтключитьОбработчикОжидания("ПроверитьСостояниеФоновогоЗадания");
		
		// Скрываем индикатор загрузки
		ПоказатьИндикаторЗагрузки(Ложь);
		
		Если РезультатПроверки.ВыполненоУспешно Тогда
			// Обрабатываем результат
			ОбработатьРезультатФоновогоЗадания();
		Иначе
			// Показываем ошибку
			ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьФоновоеЗаданиеНаСервере()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ВыполненоУспешно", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	Если ИдентификаторФоновогоЗадания = Неопределено Тогда
		Результат.Выполнено = Истина;
		Результат.ТекстОшибки = "Фоновое задание не было запущено";
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторФоновогоЗадания);
		
		Если Задание = Неопределено Тогда
			Результат.Выполнено = Истина;
			Результат.ТекстОшибки = "Фоновое задание не найдено";
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Результат.Выполнено = Истина;
			Результат.ВыполненоУспешно = Истина;
			АдресВременногоХранилища = Задание.АдресРезультата;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Результат.Выполнено = Истина;
			Результат.ТекстОшибки = "Ошибка выполнения: " + Задание.ИнформацияОбОшибке.Описание;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			Результат.Выполнено = Истина;
			Результат.ТекстОшибки = "Задание было отменено";
		КонецЕсли;
		
	Исключение
		Результат.Выполнено = Истина;
		Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатФоновогоЗадания()
	
	ПрименитьРезультатыОбновленияНаСервере();
	
	// Обновление заголовка формы
	Заголовок = СтрШаблон("Дашборд KPI за период с %1 по %2", 
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), 
		Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	
	// Уведомление пользователя
	ПоказатьОповещениеПользователя(
		"Данные обновлены",
		,
		"Дашборд KPI успешно обновлен",
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьРезультатыОбновленияНаСервере()
	
	Если ПустаяСтрока(АдресВременногоХранилища) Тогда
		// Если нет адреса, выполняем обычное обновление
		ОбновитьДанныеНаСервере();
		Возврат;
	КонецЕсли;
	
	Попытка
		// Получаем результаты из временного хранилища
		РезультатыОбновления = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
		Если ТипЗнч(РезультатыОбновления) = Тип("Структура") Тогда
			// Применяем результаты к форме
			ПрименитьРезультатыКФорме(РезультатыОбновления);
		Иначе
			// Если что-то пошло не так, выполняем обычное обновление
			ОбновитьДанныеНаСервере();
		КонецЕсли;
		
		// Очищаем временное хранилище
		УдалитьИзВременногоХранилища(АдресВременногоХранилища);
		АдресВременногоХранилища = "";
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ДашбордKPI.ПрименениеРезультатов", 
			УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		// При ошибке выполняем обычное обновление
		ОбновитьДанныеНаСервере();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьРезультатыКФорме(РезультатыОбновления)
	
	// Применение результатов продаж
	Если РезультатыОбновления.Свойство("Продажи") Тогда
		РезультатПродажи = РезультатыОбновления.Продажи.ГрафикПродаж;
		
		УстановитьЗначениеИндикатора("ИндикаторВыручка", РезультатыОбновления.Продажи.Выручка, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторКоличествоПродаж", РезультатыОбновления.Продажи.КоличествоПродаж, "ЧЦ=10; ЧДЦ=0; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторСреднийЧек", РезультатыОбновления.Продажи.СреднийЧек, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторРентабельность", РезультатыОбновления.Продажи.Рентабельность, "ЧДЦ=2", "%");
		
		УстановитьЦветИндикатора("ИндикаторВыручка", РезультатыОбновления.Продажи.Выручка > 0);
		
		Элементы.ТаблицаТопТоваров.Вывести(РезультатыОбновления.Продажи.ТопТоваров);
		Элементы.ТаблицаТопКонтрагентов.Вывести(РезультатыОбновления.Продажи.ТопКонтрагентов);
	КонецЕсли;
	
	// Применение результатов прибыльности
	Если РезультатыОбновления.Свойство("Прибыльность") Тогда
		РезультатПрибыльность = РезультатыОбновления.Прибыльность.ГрафикПрибыльности;
		
		УстановитьЗначениеИндикатора("ИндикаторВаловаяПрибыль", РезультатыОбновления.Прибыльность.ВаловаяПрибыль, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторРентабельностьПрибыльность", РезультатыОбновления.Прибыльность.РентабельностьПродаж, "ЧДЦ=2", "%");
		
		// Новые показатели
		Если РезультатыОбновления.Прибыльность.Свойство("ОперационнаяПрибыль") Тогда
			УстановитьЗначениеИндикатора("ИндикаторОперационнаяПрибыль", РезультатыОбновления.Прибыльность.ОперационнаяПрибыль, "ЧДЦ=2; ЧРГ=' '");
			УстановитьЗначениеИндикатора("ИндикаторЧистаяПрибыль", РезультатыОбновления.Прибыльность.ЧистаяПрибыль, "ЧДЦ=2; ЧРГ=' '");
			УстановитьЗначениеИндикатора("ИндикаторРентабельностьОперационная", РезультатыОбновления.Прибыльность.РентабельностьОперационная, "ЧДЦ=2", "%");
			УстановитьЗначениеИндикатора("ИндикаторРентабельностьЧистая", РезультатыОбновления.Прибыльность.РентабельностьЧистая, "ЧДЦ=2", "%");
		КонецЕсли;
		
		УстановитьЦветИндикатора("ИндикаторВаловаяПрибыль", РезультатыОбновления.Прибыльность.ВаловаяПрибыль > 0);
		
		Элементы.ТаблицаПрибыльныеТовары.Вывести(РезультатыОбновления.Прибыльность.ТопПрибыльныхТоваров);
		Элементы.ТаблицаУбыточныеТовары.Вывести(РезультатыОбновления.Прибыльность.ТопУбыточныхТоваров);
	КонецЕсли;
	
	// Применение результатов взаиморасчетов
	Если РезультатыОбновления.Свойство("Взаиморасчеты") Тогда
		РезультатВзаиморасчеты = РезультатыОбновления.Взаиморасчеты.ГрафикВзаиморасчетов;
		
		УстановитьЗначениеИндикатора("ИндикаторДебиторская", РезультатыОбновления.Взаиморасчеты.ДебиторскаяЗадолженность, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторПросроченная", РезультатыОбновления.Взаиморасчеты.ПросроченнаяДебиторская, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторДоляПросроченной", РезультатыОбновления.Взаиморасчеты.ДоляПросроченной, "ЧДЦ=2", "%");
		УстановитьЗначениеИндикатора("ИндикаторDSO", РезультатыОбновления.Взаиморасчеты.DSO, "ЧДЦ=0");
		
		// Новые показатели
		Если РезультатыОбновления.Взаиморасчеты.Свойство("КредиторскаяЗадолженность") Тогда
			УстановитьЗначениеИндикатора("ИндикаторКредиторская", РезультатыОбновления.Взаиморасчеты.КредиторскаяЗадолженность, "ЧДЦ=2; ЧРГ=' '");
			УстановитьЗначениеИндикатора("ИндикаторDPO", РезультатыОбновления.Взаиморасчеты.DPO, "ЧДЦ=0");
		КонецЕсли;
		
		// Цветовая индикация
		Если РезультатыОбновления.Взаиморасчеты.ДоляПросроченной > 20 Тогда
			Элементы.ИндикаторДоляПросроченной.ЦветТекста = Новый Цвет(255, 0, 0);
		ИначеЕсли РезультатыОбновления.Взаиморасчеты.ДоляПросроченной > 10 Тогда
			Элементы.ИндикаторДоляПросроченной.ЦветТекста = Новый Цвет(255, 165, 0);
		Иначе
			Элементы.ИндикаторДоляПросроченной.ЦветТекста = Новый Цвет(0, 128, 0);
		КонецЕсли;
		
		Элементы.ТаблицаТопДебиторов.Вывести(РезультатыОбновления.Взаиморасчеты.ТопДебиторов);
		Элементы.ТаблицаПросроченнаяЗадолженность.Вывести(РезультатыОбновления.Взаиморасчеты.ПросроченнаяЗадолженность);
		
		// Aging-анализ
		Если РезультатыОбновления.Взаиморасчеты.Свойство("AgingАнализ") Тогда
			Элементы.ДиаграммаAgingАнализ.Вывести(РезультатыОбновления.Взаиморасчеты.AgingАнализ);
		КонецЕсли;
	КонецЕсли;
	
	// Применение результатов запасов
	Если РезультатыОбновления.Свойство("Запасы") Тогда
		РезультатЗапасы = РезультатыОбновления.Запасы.ГрафикЗапасов;
		
		УстановитьЗначениеИндикатора("ИндикаторСтоимостьЗапасов", РезультатыОбновления.Запасы.СтоимостьЗапасов, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторОборачиваемость", РезультатыОбновления.Запасы.Оборачиваемость, "ЧДЦ=2");
		УстановитьЗначениеИндикатора("ИндикаторДнейЗапаса", РезультатыОбновления.Запасы.ДнейЗапаса, "ЧДЦ=0");
		УстановитьЗначениеИндикатора("ИндикаторВыполнениеЗаказов", РезультатыОбновления.Запасы.ВыполнениеЗаказов, "ЧДЦ=2", "%");
		УстановитьЗначениеИндикатора("ИндикаторОтсутствиеТоваров", РезультатыОбновления.Запасы.ОтсутствиеТоваров, "ЧДЦ=2", "%");
		
		Элементы.ТаблицаТопТоваровПоОстаткам.Вывести(РезультатыОбновления.Запасы.ТопТоваровПоОстаткам);
		Элементы.ТаблицаНизкаяОборачиваемость.Вывести(РезультатыОбновления.Запасы.НизкаяОборачиваемость);
	КонецЕсли;
	
	// Применение результатов денежных потоков
	Если РезультатыОбновления.Свойство("ДенежныеПотоки") Тогда
		РезультатДенежныеПотоки = РезультатыОбновления.ДенежныеПотоки.ГрафикДенежныхПотоков;
		
		УстановитьЗначениеИндикатора("ИндикаторОперационныйПоток", РезультатыОбновления.ДенежныеПотоки.ОперационныйПоток, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторИнвестиционныйПоток", РезультатыОбновления.ДенежныеПотоки.ИнвестиционныйПоток, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторФинансовыйПоток", РезультатыОбновления.ДенежныеПотоки.ФинансовыйПоток, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторСвободныйДенежныйПоток", РезультатыОбновления.ДенежныеПотоки.СвободныйДенежныйПоток, "ЧДЦ=2; ЧРГ=' '");
		
		УстановитьЦветИндикатора("ИндикаторОперационныйПоток", РезультатыОбновления.ДенежныеПотоки.ОперационныйПоток > 0);
		УстановитьЦветИндикатора("ИндикаторСвободныйДенежныйПоток", РезультатыОбновления.ДенежныеПотоки.СвободныйДенежныйПоток > 0);
		
		Элементы.ДиаграммаДенежныеПотоки.Вывести(РезультатыОбновления.ДенежныеПотоки.ГрафикДенежныхПотоков);
		Элементы.ГрафикДинамикаОстатковДС.Вывести(РезультатыОбновления.ДенежныеПотоки.ДинамикаОстатков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИндикаторЗагрузки(Показать)
	
	// Управление видимостью индикатора загрузки
	Если Показать Тогда
		Элементы.ГруппаИндикаторЗагрузки.Видимость = Истина;
		Элементы.ДекорацияЗагрузка.Заголовок = "Обновление данных...";
		
		// Блокировка элементов управления
		Элементы.ГруппаФильтры.Доступность = Ложь;
		Элементы.ГруппаКомандыУправления.Доступность = Ложь;
	Иначе
		Элементы.ГруппаИндикаторЗагрузки.Видимость = Ложь;
		
		// Разблокировка элементов управления
		Элементы.ГруппаФильтры.Доступность = Истина;
		Элементы.ГруппаКомандыУправления.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОбновление(Команда)
	
	ОтменитьФоновоеЗаданиеНаСервере();
	
	// Отключаем обработчик ожидания
	ОтключитьОбработчикОжидания("ПроверитьСостояниеФоновогоЗадания");
	
	// Скрываем индикатор загрузки
	ПоказатьИндикаторЗагрузки(Ложь);
	
	ПоказатьОповещениеПользователя(
		"Обновление отменено",
		,
		"Обновление данных было отменено пользователем",
		БиблиотекаКартинок.Предупреждение32);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьФоновоеЗаданиеНаСервере()
	
	Если ИдентификаторФоновогоЗадания <> Неопределено Тогда
		Попытка
			ФоновыеЗадания.Отменить(ИдентификаторФоновогоЗадания);
		Исключение
			// Игнорируем ошибку, если задание уже завершено
		КонецПопытки;
		
		ИдентификаторФоновогоЗадания = Неопределено;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(АдресВременногоХранилища) Тогда
		УдалитьИзВременногоХранилища(АдресВременногоХранилища);
		АдресВременногоХранилища = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура для выполнения в фоновом задании
// Должна быть размещена в модуле объекта обработки
&НаСервере
Процедура ВыполнитьОбновлениеДанныхВФоне(АдресПараметров, УникальныйИдентификаторФормы) Экспорт
	
	// Получаем параметры из временного хранилища
	ПараметрыОбновления = ПолучитьИзВременногоХранилища(АдресПараметров);
	
	// Структура для результатов
	РезультатыОбновления = Новый Структура;
	
	Попытка
		// Обновление данных продаж
		РезультатыПродаж = ОбновитьДанныеПродажВФоне(ПараметрыОбновления);
		РезультатыОбновления.Вставить("Продажи", РезультатыПродаж);
		
		// Обновление данных прибыльности
		РезультатыПрибыльности = ОбновитьДанныеПрибыльностиВФоне(ПараметрыОбновления);
		РезультатыОбновления.Вставить("Прибыльность", РезультатыПрибыльности);
		
		// Обновление данных взаиморасчетов
		РезультатыВзаиморасчетов = ОбновитьДанныеВзаиморасчетовВФоне(ПараметрыОбновления);
		РезультатыОбновления.Вставить("Взаиморасчеты", РезультатыВзаиморасчетов);
		
		// Обновление данных запасов
		РезультатыЗапасов = ОбновитьДанныеЗапасовВФоне(ПараметрыОбновления);
		РезультатыОбновления.Вставить("Запасы", РезультатыЗапасов);
		
		// Обновление данных денежных потоков
		Если ФайлСуществует("skd_cashflow.xml") Тогда
			РезультатыДенежныхПотоков = ОбновитьДанныеДенежныхПотоковВФоне(ПараметрыОбновления);
			РезультатыОбновления.Вставить("ДенежныеПотоки", РезультатыДенежныхПотоков);
		КонецЕсли;
		
		// Помещаем результаты во временное хранилище
		АдресРезультата = ПоместитьВоВременноеХранилище(РезультатыОбновления, УникальныйИдентификаторФормы);
		
		// Возвращаем адрес результата
		Возврат АдресРезультата;
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ДашбордKPI.ФоновоеОбновление", 
			УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры