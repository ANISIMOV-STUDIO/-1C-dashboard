// Расширенный модуль формы дашборда KPI с полным функционалом
// Часть 2: Процедуры обновления данных по вкладкам

#Область РаботаСДаннымиПродажи

&НаСервере
Процедура ОбновитьДанныеПродаж()
	
	Попытка
		// Получение схемы компоновки данных
		СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Продажи");
		
		// Обновление основного графика продаж
		РезультатКомпоновки = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "Основной");
		
		// Получение итоговых значений и обновление индикаторов
		ОбновитьИндикаторыПродаж(РезультатКомпоновки);
		
		// Вывод графика
		РезультатПродажи = РезультатКомпоновки.ТабличныйДокумент;
		
		// Обновление таблиц топ товаров и контрагентов
		ОбновитьТаблицуТопТоваров();
		ОбновитьТаблицуТопКонтрагентов();
		
		// Обновление спарклайнов продаж
		ОбновитьСпарклайнПродаж();
		
	Исключение
		ОбработатьОшибку("ОбновлениеПродаж", ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыПродаж(РезультатКомпоновки)
	
	// Получение итоговых значений из результата компоновки
	ИтоговыеЗначения = ПолучитьИтогиИзРезультатаКомпоновки(РезультатКомпоновки, 
		"Выручка, КоличествоПродаж, СреднийЧек");
	
	// Обновление индикаторов на форме
	УстановитьЗначениеИндикатора("ИндикаторВыручка", ИтоговыеЗначения.Выручка, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторКоличествоПродаж", ИтоговыеЗначения.КоличествоПродаж, "ЧЦ=10; ЧДЦ=0; ЧРГ=' '");
	
	// Расчет среднего чека
	СреднийЧек = ?(ИтоговыеЗначения.КоличествоПродаж > 0, 
		ИтоговыеЗначения.Выручка / ИтоговыеЗначения.КоличествоПродаж, 0);
	УстановитьЗначениеИндикатора("ИндикаторСреднийЧек", СреднийЧек, "ЧДЦ=2; ЧРГ=' '");
	
	// Установка цвета индикаторов
	УстановитьЦветИндикатора("ИндикаторВыручка", ИтоговыеЗначения.Выручка > 0);
	
	// Получение рентабельности из СКД для отображения на вкладке продаж
	ОбновитьИндикаторРентабельностиПродаж();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпарклайнПродаж()
	
	// Получение данных для спарклайна за последние 30 дней
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продажи.Период КАК Период,
	|	СУММА(Продажи.СуммаПродажи) КАК Выручка
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Продажи.Активность
	|	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИЛИ Продажи.Организация = &Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода - 30 * 86400));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СпарклайнДанныеПродаж = РезультатЗапроса.Выгрузить();
		// Здесь должна быть визуализация спарклайна
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДаннымиПрибыльность

&НаСервере
Процедура ОбновитьДанныеПрибыльности()
	
	Попытка
		// Определяем какую схему использовать
		ИмяМакета = ?(МакетСуществует("СКД_ПрибыльностьРасширенная"), 
			"СКД_ПрибыльностьРасширенная", "СКД_Прибыльность");
		
		СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет(ИмяМакета);
		
		// Выполнение компоновки
		РезультатКомпоновки = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "Основной");
		
		// Обновление индикаторов прибыльности
		ОбновитьИндикаторыПрибыльности(РезультатКомпоновки);
		
		РезультатПрибыльность = РезультатКомпоновки.ТабличныйДокумент;
		
		// Если есть расширенная схема, обновляем диаграмму водопад
		Если ИмяМакета = "СКД_ПрибыльностьРасширенная" Тогда
			РезультатВодопад = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "ДиаграммаВодопад");
			Если Элементы.Найти("ДиаграммаСтруктураПрибыли") <> Неопределено Тогда
				Элементы.ДиаграммаСтруктураПрибыли.Вывести(РезультатВодопад.ТабличныйДокумент);
			КонецЕсли;
		КонецЕсли;
		
		// Обновление таблиц прибыльных и убыточных товаров
		ОбновитьТаблицуПрибыльныхТоваров();
		ОбновитьТаблицуУбыточныхТоваров();
		
	Исключение
		ОбработатьОшибку("ОбновлениеПрибыльности", ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыПрибыльности(РезультатКомпоновки)
	
	// Получение итоговых значений из результата компоновки
	СписокПолей = "Выручка, Себестоимость, ВаловаяПрибыль, РентабельностьПродаж";
	
	// Если есть расширенные поля
	Если МакетСуществует("СКД_ПрибыльностьРасширенная") Тогда
		СписокПолей = СписокПолей + ", ОперационнаяПрибыль, РентабельностьОперационная, ЧистаяПрибыль, РентабельностьЧистая";
	КонецЕсли;
	
	ИтоговыеЗначения = ПолучитьИтогиИзРезультатаКомпоновки(РезультатКомпоновки, СписокПолей);
	
	// Обновление основных индикаторов
	УстановитьЗначениеИндикатора("ИндикаторВаловаяПрибыль", ИтоговыеЗначения.ВаловаяПрибыль, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторРентабельностьПрибыльность", ИтоговыеЗначения.РентабельностьПродаж, "ЧДЦ=2", "%");
	
	// Обновление расширенных индикаторов
	Если ИтоговыеЗначения.Свойство("ОперационнаяПрибыль") Тогда
		УстановитьЗначениеИндикатора("ИндикаторОперационнаяПрибыль", ИтоговыеЗначения.ОперационнаяПрибыль, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторРентабельностьОперационная", ИтоговыеЗначения.РентабельностьОперационная, "ЧДЦ=2", "%");
		УстановитьЗначениеИндикатора("ИндикаторЧистаяПрибыль", ИтоговыеЗначения.ЧистаяПрибыль, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторРентабельностьЧистая", ИтоговыеЗначения.РентабельностьЧистая, "ЧДЦ=2", "%");
	КонецЕсли;
	
	// Цветовая индикация
	УстановитьЦветИндикатораРентабельности("ИндикаторРентабельностьПрибыльность", ИтоговыеЗначения.РентабельностьПродаж);
	
	Если ИтоговыеЗначения.Свойство("РентабельностьОперационная") Тогда
		УстановитьЦветИндикатораРентабельности("ИндикаторРентабельностьОперационная", ИтоговыеЗначения.РентабельностьОперационная);
		УстановитьЦветИндикатораРентабельности("ИндикаторРентабельностьЧистая", ИтоговыеЗначения.РентабельностьЧистая);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветИндикатораРентабельности(ИмяИндикатора, ЗначениеРентабельности)
	
	Если ЗначениеРентабельности >= 20 Тогда
		Элементы[ИмяИндикатора].ЦветТекста = Новый Цвет(0, 128, 0);
	ИначеЕсли ЗначениеРентабельности >= 10 Тогда
		Элементы[ИмяИндикатора].ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы[ИмяИндикатора].ЦветТекста = Новый Цвет(255, 0, 0);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДаннымиВзаиморасчеты

&НаСервере
Процедура ОбновитьДанныеВзаиморасчетов()
	
	Попытка
		// Определяем какую схему использовать
		ИмяМакета = ?(МакетСуществует("СКД_ВзаиморасчетыРасширенные"), 
			"СКД_ВзаиморасчетыРасширенные", "СКД_Взаиморасчеты");
		
		СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет(ИмяМакета);
		
		// Выполнение компоновки
		РезультатКомпоновки = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "Основной");
		
		// Обновление индикаторов взаиморасчетов
		ОбновитьИндикаторыВзаиморасчетов(РезультатКомпоновки);
		
		РезультатВзаиморасчеты = РезультатКомпоновки.ТабличныйДокумент;
		
		// Если есть расширенная схема, обновляем aging-анализ
		Если ИмяМакета = "СКД_ВзаиморасчетыРасширенные" Тогда
			РезультатAging = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "AgingАнализ");
			Если Элементы.Найти("ДиаграммаAgingАнализ") <> Неопределено Тогда
				Элементы.ДиаграммаAgingАнализ.Вывести(РезультатAging.ТабличныйДокумент);
			КонецЕсли;
		КонецЕсли;
		
		// Обновление таблиц
		ОбновитьТаблицуТопДебиторов();
		ОбновитьТаблицуПросроченнойЗадолженности();
		
		// Обновление таблицы кредиторов если есть
		Если Элементы.Найти("ТаблицаТопКредиторов") <> Неопределено Тогда
			ОбновитьТаблицуТопКредиторов();
		КонецЕсли;
		
	Исключение
		ОбработатьОшибку("ОбновлениеВзаиморасчетов", ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыВзаиморасчетов(РезультатКомпоновки)
	
	// Базовый список полей
	СписокПолей = "ДебиторскаяЗадолженность, ПросроченнаяДебиторскаяЗадолженность, ДоляПросроченнойЗадолженности, DSO";
	
	// Расширенный список полей
	Если МакетСуществует("СКД_ВзаиморасчетыРасширенные") Тогда
		СписокПолей = СписокПолей + ", КредиторскаяЗадолженность, ПросроченнаяКредиторскаяЗадолженность, DPO, CashConversionCycle";
	КонецЕсли;
	
	ИтоговыеЗначения = ПолучитьИтогиИзРезультатаКомпоновки(РезультатКомпоновки, СписокПолей);
	
	// Обновление основных индикаторов
	УстановитьЗначениеИндикатора("ИндикаторДебиторская", ИтоговыеЗначения.ДебиторскаяЗадолженность, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторПросроченная", ИтоговыеЗначения.ПросроченнаяДебиторскаяЗадолженность, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторДоляПросроченной", ИтоговыеЗначения.ДоляПросроченнойЗадолженности, "ЧДЦ=2", "%");
	УстановитьЗначениеИндикатора("ИндикаторDSO", ИтоговыеЗначения.DSO, "ЧДЦ=0");
	
	// Обновление расширенных индикаторов
	Если ИтоговыеЗначения.Свойство("КредиторскаяЗадолженность") Тогда
		УстановитьЗначениеИндикатора("ИндикаторКредиторская", ИтоговыеЗначения.КредиторскаяЗадолженность, "ЧДЦ=2; ЧРГ=' '");
		УстановитьЗначениеИндикатора("ИндикаторDPO", ИтоговыеЗначения.DPO, "ЧДЦ=0");
		УстановитьЗначениеИндикатора("ИндикаторCCC", ИтоговыеЗначения.CashConversionCycle, "ЧДЦ=0");
	КонецЕсли;
	
	// Цветовая индикация
	УстановитьЦветИндикатораЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветИндикатораЗадолженности()
	
	// Для доли просроченной задолженности
	ДоляПросроченной = ПолучитьЧисловоеЗначениеИндикатора("ИндикаторДоляПросроченной");
	Если ДоляПросроченной > 20 Тогда
		Элементы.ИндикаторДоляПросроченной.ЦветТекста = Новый Цвет(255, 0, 0);
	ИначеЕсли ДоляПросроченной > 10 Тогда
		Элементы.ИндикаторДоляПросроченной.ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы.ИндикаторДоляПросроченной.ЦветТекста = Новый Цвет(0, 128, 0);
	КонецЕсли;
	
	// Для DSO
	DSO = ПолучитьЧисловоеЗначениеИндикатора("ИндикаторDSO");
	Если DSO > 45 Тогда
		Элементы.ИндикаторDSO.ЦветТекста = Новый Цвет(255, 0, 0);
	ИначеЕсли DSO > 30 Тогда
		Элементы.ИндикаторDSO.ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы.ИндикаторDSO.ЦветТекста = Новый Цвет(0, 128, 0);
	КонецЕсли;
	
	// Для DPO (обратная логика - больше лучше)
	Если Элементы.Найти("ИндикаторDPO") <> Неопределено Тогда
		DPO = ПолучитьЧисловоеЗначениеИндикатора("ИндикаторDPO");
		Если DPO < 30 Тогда
			Элементы.ИндикаторDPO.ЦветТекста = Новый Цвет(255, 165, 0);
		Иначе
			Элементы.ИндикаторDPO.ЦветТекста = Новый Цвет(0, 128, 0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДаннымиДенежныеПотоки

&НаСервере
Процедура ОбновитьДанныеДенежныхПотоков()
	
	Попытка
		Если НЕ МакетСуществует("СКД_ДенежныеПотоки") Тогда
			Возврат;
		КонецЕсли;
		
		СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_ДенежныеПотоки");
		
		// Выполнение компоновки
		РезультатКомпоновки = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "ОсновнойАнализ");
		
		// Обновление индикаторов денежных потоков
		ОбновитьИндикаторыДенежныхПотоков(РезультатКомпоновки);
		
		// Вывод диаграмм
		Элементы.ДиаграммаДенежныеПотоки.Вывести(РезультатКомпоновки.ТабличныйДокумент);
		
		// График динамики остатков
		РезультатДинамика = ВыполнитьКомпоновкуДанных(СхемаКомпоновкиДанных, "ДинамикаОстатков");
		Если Элементы.Найти("ГрафикДинамикаОстатковДС") <> Неопределено Тогда
			Элементы.ГрафикДинамикаОстатковДС.Вывести(РезультатДинамика.ТабличныйДокумент);
		КонецЕсли;
		
	Исключение
		ОбработатьОшибку("ОбновлениеДенежныхПотоков", ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыДенежныхПотоков(РезультатКомпоновки)
	
	СписокПолей = "НачальныйОстаток, ОперационныйПоток, ИнвестиционныйПоток, ФинансовыйПоток, КонечныйОстаток, СвободныйДенежныйПоток, КоэффициентДенежнойЛиквидности";
	
	ИтоговыеЗначения = ПолучитьИтогиИзРезультатаКомпоновки(РезультатКомпоновки, СписокПолей);
	
	// Обновление индикаторов
	УстановитьЗначениеИндикатора("ИндикаторНачальныйОстатокДС", ИтоговыеЗначения.НачальныйОстаток, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторОперационныйПоток", ИтоговыеЗначения.ОперационныйПоток, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторИнвестиционныйПоток", ИтоговыеЗначения.ИнвестиционныйПоток, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторФинансовыйПоток", ИтоговыеЗначения.ФинансовыйПоток, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторКонечныйОстатокДС", ИтоговыеЗначения.КонечныйОстаток, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторСвободныйДенежныйПоток", ИтоговыеЗначения.СвободныйДенежныйПоток, "ЧДЦ=2; ЧРГ=' '");
	УстановитьЗначениеИндикатора("ИндикаторКоэффициентЛиквидности", ИтоговыеЗначения.КоэффициентДенежнойЛиквидности, "ЧДЦ=2");
	
	// Цветовая индикация
	УстановитьЦветИндикатора("ИндикаторОперационныйПоток", ИтоговыеЗначения.ОперационныйПоток > 0);
	УстановитьЦветИндикатора("ИндикаторСвободныйДенежныйПоток", ИтоговыеЗначения.СвободныйДенежныйПоток > 0);
	
	// Для коэффициента ликвидности
	Если ИтоговыеЗначения.КоэффициентДенежнойЛиквидности < 0.1 Тогда
		Элементы.ИндикаторКоэффициентЛиквидности.ЦветТекста = Новый Цвет(255, 0, 0);
	ИначеЕсли ИтоговыеЗначения.КоэффициентДенежнойЛиквидности < 0.2 Тогда
		Элементы.ИндикаторКоэффициентЛиквидности.ЦветТекста = Новый Цвет(255, 165, 0);
	Иначе
		Элементы.ИндикаторКоэффициентЛиквидности.ЦветТекста = Новый Цвет(0, 128, 0);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГлавнаяСтраница

&НаСервере
Процедура ОбновитьГлавнуюСтраницу()
	
	// Обновление ключевых KPI на главной странице
	Если Элементы.Найти("СтраницаГлавная") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Копирование основных показателей на главную страницу
	КопироватьЗначениеИндикатора("ИндикаторВыручка", "ИндикаторВыручкаГлавная");
	КопироватьЗначениеИндикатора("ИндикаторВаловаяПрибыль", "ИндикаторПрибыльГлавная");
	КопироватьЗначениеИндикатора("ИндикаторДебиторская", "ИндикаторДебиторскаяГлавная");
	КопироватьЗначениеИндикатора("ИндикаторСтоимостьЗапасов", "ИндикаторЗапасыГлавная");
	
	Если Элементы.Найти("ИндикаторОперационныйПоток") <> Неопределено Тогда
		КопироватьЗначениеИндикатора("ИндикаторОперационныйПоток", "ИндикаторДенежныйПотокГлавная");
	КонецЕсли;
	
	// Обновление сводных виджетов
	ОбновитьСводныеВиджеты();
	
КонецПроцедуры

&НаСервере
Процедура КопироватьЗначениеИндикатора(ИмяИсточника, ИмяПриемника)
	
	ЭлементИсточник = Элементы.Найти(ИмяИсточника);
	ЭлементПриемник = Элементы.Найти(ИмяПриемника);
	
	Если ЭлементИсточник <> Неопределено И ЭлементПриемник <> Неопределено Тогда
		ЭлементПриемник.Заголовок = ЭлементИсточник.Заголовок;
		ЭлементПриемник.ЦветТекста = ЭлементИсточник.ЦветТекста;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСводныеВиджеты()
	
	// Здесь можно добавить создание сводных диаграмм или других виджетов
	// для главной страницы на основе данных из всех вкладок
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

&НаСервере
Функция МакетСуществует(ИмяМакета)
	
	Попытка
		Макет = Обработки.ДКП_ДашбордKPI.ПолучитьМакет(ИмяМакета);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьЧисловоеЗначениеИндикатора(ИмяИндикатора)
	
	Элемент = Элементы.Найти(ИмяИндикатора);
	Если Элемент = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаЗначения = Элемент.Заголовок;
	
	// Удаляем все символы кроме цифр, точки и минуса
	ОчищеннаяСтрока = "";
	Для Позиция = 1 По СтрДлина(СтрокаЗначения) Цикл
		Символ = Сред(СтрокаЗначения, Позиция, 1);
		Если СтрНайти("0123456789.-", Символ) > 0 Тогда
			ОчищеннаяСтрока = ОчищеннаяСтрока + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Возврат Число(СтрЗаменить(ОчищеннаяСтрока, " ", ""));
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьЭлементовПоПравам()
	
	// Проверка прав на просмотр финансовых данных
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж) Тогда
		Элементы.СтраницаПрибыльность.Видимость = Ложь;
	КонецЕсли;
	
	// Проверка прав на просмотр денежных средств
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ДенежныеСредства) Тогда
		Если Элементы.Найти("СтраницаДенежныеПотоки") <> Неопределено Тогда
			Элементы.СтраницаДенежныеПотоки.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти