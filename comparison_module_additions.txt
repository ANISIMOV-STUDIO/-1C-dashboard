// Дополнения к модулю формы для поддержки визуализации сравнения периодов
// Эти процедуры нужно добавить в модуль формы

#Область СравнениеСПрошлымПериодомРасширенное

&НаСервере
Процедура СравнитьСПрошлымПериодомНаСервере()
	
	// Включение режима сравнения
	РежимСравнения = Истина;
	
	// Сохранение текущих значений периода и KPI
	ТекущиеДанные = СохранитьТекущиеПоказатели();
	
	// Формирование строк периодов для отображения
	ТекущийПериодСтрока = СтрШаблон("Текущий: %1 - %2", 
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), 
		Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	
	// Расчет аналогичного периода прошлого года
	НачалоПериодаПрошлогоГода = ДобавитьМесяц(НачалоПериода, -12);
	КонецПериодаПрошлогоГода = ДобавитьМесяц(КонецПериода, -12);
	
	ПрошлыйПериодСтрока = СтрШаблон("Прошлый: %1 - %2", 
		Формат(НачалоПериодаПрошлогоГода, "ДФ=dd.MM.yyyy"), 
		Формат(КонецПериодаПрошлогоГода, "ДФ=dd.MM.yyyy"));
	
	// Временно устанавливаем период прошлого года
	СохраненноеНачалоПериода = НачалоПериода;
	СохраненныйКонецПериода = КонецПериода;
	
	НачалоПериода = НачалоПериодаПрошлогоГода;
	КонецПериода = КонецПериодаПрошлогоГода;
	
	// Получение данных за прошлый период
	ОбновитьДанныеНаСервере();
	ПрошлыеДанные = СохранитьТекущиеПоказатели();
	
	// Восстановление текущего периода
	НачалоПериода = СохраненноеНачалоПериода;
	КонецПериода = СохраненныйКонецПериода;
	
	// Обновление данных за текущий период
	ОбновитьДанныеНаСервере();
	
	// Визуализация сравнения
	ВизуализироватьСравнение(ТекущиеДанные, ПрошлыеДанные);
	
	// Показать группу сравнения периодов
	Элементы.ГруппаПериодСравнения.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция СохранитьТекущиеПоказатели()
	
	ПоказателиKPI = Новый Структура;
	
	// Продажи
	ПоказателиKPI.Вставить("Выручка", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторВыручка.Заголовок));
	ПоказателиKPI.Вставить("СреднийЧек", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторСреднийЧек.Заголовок));
	ПоказателиKPI.Вставить("КоличествоПродаж", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторКоличествоПродаж.Заголовок));
	ПоказателиKPI.Вставить("Рентабельность", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторРентабельность.Заголовок));
	
	// Прибыльность
	ПоказателиKPI.Вставить("ВаловаяПрибыль", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторВаловаяПрибыль.Заголовок));
	ПоказателиKPI.Вставить("РентабельностьПрибыльность", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторРентабельностьПрибыльность.Заголовок));
	
	// Взаиморасчеты
	ПоказателиKPI.Вставить("ДебиторскаяЗадолженность", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторДебиторская.Заголовок));
	ПоказателиKPI.Вставить("ПросроченнаяЗадолженность", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторПросроченная.Заголовок));
	ПоказателиKPI.Вставить("ДоляПросроченной", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторДоляПросроченной.Заголовок));
	ПоказателиKPI.Вставить("DSO", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторDSO.Заголовок));
	
	// Запасы
	ПоказателиKPI.Вставить("СтоимостьЗапасов", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторСтоимостьЗапасов.Заголовок));
	ПоказателиKPI.Вставить("Оборачиваемость", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторОборачиваемость.Заголовок));
	ПоказателиKPI.Вставить("ДнейЗапаса", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторДнейЗапаса.Заголовок));
	ПоказателиKPI.Вставить("ВыполнениеЗаказов", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторВыполнениеЗаказов.Заголовок));
	ПоказателиKPI.Вставить("ОтсутствиеТоваров", ПолучитьЧисловоеЗначениеИндикатора(Элементы.ИндикаторОтсутствиеТоваров.Заголовок));
	
	Возврат ПоказателиKPI;
	
КонецФункции

&НаСервере
Функция ПолучитьЧисловоеЗначениеИндикатора(СтрокаЗначения)
	
	// Удаляем все символы кроме цифр, точки и минуса
	ОчищеннаяСтрока = "";
	Для Позиция = 1 По СтрДлина(СтрокаЗначения) Цикл
		Символ = Сред(СтрокаЗначения, Позиция, 1);
		Если СтрНайти("0123456789.-", Символ) > 0 Тогда
			ОчищеннаяСтрока = ОчищеннаяСтрока + Символ;
		КонецЕсли;
	КонецЦикла;
	
	// Заменяем пробелы (используемые как разделители тысяч)
	ОчищеннаяСтрока = СтрЗаменить(ОчищеннаяСтрока, " ", "");
	
	Попытка
		Возврат Число(ОчищеннаяСтрока);
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ВизуализироватьСравнение(ТекущиеДанные, ПрошлыеДанные)
	
	// Визуализация изменений для каждого индикатора
	ВизуализироватьИзменениеИндикатора("Выручка", ТекущиеДанные.Выручка, ПрошлыеДанные.Выручка, "СтрелкаВыручка", "ИзменениеВыручка");
	ВизуализироватьИзменениеИндикатора("СреднийЧек", ТекущиеДанные.СреднийЧек, ПрошлыеДанные.СреднийЧек, "СтрелкаСреднийЧек", "ИзменениеСреднийЧек");
	ВизуализироватьИзменениеИндикатора("КоличествоПродаж", ТекущиеДанные.КоличествоПродаж, ПрошлыеДанные.КоличествоПродаж, "СтрелкаКоличествоПродаж", "ИзменениеКоличествоПродаж");
	ВизуализироватьИзменениеИндикатора("Рентабельность", ТекущиеДанные.Рентабельность, ПрошлыеДанные.Рентабельность, "СтрелкаРентабельность", "ИзменениеРентабельность");
	
	ВизуализироватьИзменениеИндикатора("ВаловаяПрибыль", ТекущиеДанные.ВаловаяПрибыль, ПрошлыеДанные.ВаловаяПрибыль, "СтрелкаВаловаяПрибыль", "ИзменениеВаловаяПрибыль");
	ВизуализироватьИзменениеИндикатора("РентабельностьПрибыльность", ТекущиеДанные.РентабельностьПрибыльность, ПрошлыеДанные.РентабельностьПрибыльность, "СтрелкаРентабельностьПрибыльность", "ИзменениеРентабельностьПрибыльность");
	
	// Для задолженности - обратная логика (меньше = лучше)
	ВизуализироватьИзменениеИндикатора("ДебиторскаяЗадолженность", ТекущиеДанные.ДебиторскаяЗадолженность, ПрошлыеДанные.ДебиторскаяЗадолженность, "СтрелкаДебиторская", "ИзменениеДебиторская", Истина);
	ВизуализироватьИзменениеИндикатора("ПросроченнаяЗадолженность", ТекущиеДанные.ПросроченнаяЗадолженность, ПрошлыеДанные.ПросроченнаяЗадолженность, "СтрелкаПросроченная", "ИзменениеПросроченная", Истина);
	ВизуализироватьИзменениеИндикатора("ДоляПросроченной", ТекущиеДанные.ДоляПросроченной, ПрошлыеДанные.ДоляПросроченной, "СтрелкаДоляПросроченной", "ИзменениеДоляПросроченной", Истина);
	ВизуализироватьИзменениеИндикатора("DSO", ТекущиеДанные.DSO, ПрошлыеДанные.DSO, "СтрелкаDSO", "ИзменениеDSO", Истина);
	
	ВизуализироватьИзменениеИндикатора("СтоимостьЗапасов", ТекущиеДанные.СтоимостьЗапасов, ПрошлыеДанные.СтоимостьЗапасов, "СтрелкаСтоимостьЗапасов", "ИзменениеСтоимостьЗапасов");
	ВизуализироватьИзменениеИндикатора("Оборачиваемость", ТекущиеДанные.Оборачиваемость, ПрошлыеДанные.Оборачиваемость, "СтрелкаОборачиваемость", "ИзменениеОборачиваемость");
	ВизуализироватьИзменениеИндикатора("ДнейЗапаса", ТекущиеДанные.ДнейЗапаса, ПрошлыеДанные.ДнейЗапаса, "СтрелкаДнейЗапаса", "ИзменениеДнейЗапаса", Истина);
	ВизуализироватьИзменениеИндикатора("ВыполнениеЗаказов", ТекущиеДанные.ВыполнениеЗаказов, ПрошлыеДанные.ВыполнениеЗаказов, "СтрелкаВыполнениеЗаказов", "ИзменениеВыполнениеЗаказов");
	ВизуализироватьИзменениеИндикатора("ОтсутствиеТоваров", ТекущиеДанные.ОтсутствиеТоваров, ПрошлыеДанные.ОтсутствиеТоваров, "СтрелкаОтсутствиеТоваров", "ИзменениеОтсутствиеТоваров", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВизуализироватьИзменениеИндикатора(ИмяПоказателя, ТекущееЗначение, ПрошлоеЗначение, ИмяСтрелки, ИмяИзменения, ОбратнаяЛогика = Ложь)
	
	// Проверка существования элементов формы
	Если НЕ Элементы.Найти(ИмяСтрелки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет изменения
	Если ПрошлоеЗначение = 0 Тогда
		Если ТекущееЗначение = 0 Тогда
			ПроцентИзменения = 0;
		Иначе
			ПроцентИзменения = 100; // Условно 100% рост
		КонецЕсли;
	Иначе
		ПроцентИзменения = (ТекущееЗначение - ПрошлоеЗначение) / ПрошлоеЗначение * 100;
	КонецЕсли;
	
	АбсолютноеИзменение = ТекущееЗначение - ПрошлоеЗначение;
	
	// Определение направления и цвета
	Если АбсолютноеИзменение > 0 Тогда
		НаправлениеИзменения = "вверх";
		ЦветИзменения = ?(ОбратнаяЛогика, Новый Цвет(255, 0, 0), Новый Цвет(0, 128, 0)); // Красный если рост плохо, зеленый если хорошо
		Картинка = БиблиотекаКартинок.СтрелкаВверхЗеленая;
		Знак = "+";
	ИначеЕсли АбсолютноеИзменение < 0 Тогда
		НаправлениеИзменения = "вниз";
		ЦветИзменения = ?(ОбратнаяЛогика, Новый Цвет(0, 128, 0), Новый Цвет(255, 0, 0)); // Зеленый если снижение хорошо, красный если плохо
		Картинка = БиблиотекаКартинок.СтрелкаВнизКрасная;
		Знак = "";
	Иначе
		НаправлениеИзменения = "без изменений";
		ЦветИзменения = Новый Цвет(128, 128, 128); // Серый
		Картинка = БиблиотекаКартинок.РавноСерое;
		Знак = "";
	КонецЕсли;
	
	// Установка видимости и значений
	Элементы[ИмяСтрелки].Видимость = Истина;
	Элементы[ИмяСтрелки].Картинка = Картинка;
	
	Элементы[ИмяИзменения].Видимость = Истина;
	Элементы[ИмяИзменения].Заголовок = СтрШаблон("%1%2%% (%3%4)", Знак, Формат(ПроцентИзменения, "ЧДЦ=1"), Знак, Формат(АбсолютноеИзменение, "ЧДЦ=0; ЧРГ=' '"));
	Элементы[ИмяИзменения].ЦветТекста = ЦветИзменения;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСравнение(Команда)
	
	РежимСравнения = Ложь;
	Элементы.ГруппаПериодСравнения.Видимость = Ложь;
	
	// Скрыть все элементы сравнения
	СкрытьЭлементыСравнения();
	
	// Обновить данные для возврата к обычному режиму
	ОбновитьДанныеНаСервереАсинхронно();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЭлементыСравнения()
	
	// Список имен элементов сравнения
	МассивЭлементовСравнения = Новый Массив;
	МассивЭлементовСравнения.Добавить("СтрелкаВыручка");
	МассивЭлементовСравнения.Добавить("ИзменениеВыручка");
	МассивЭлементовСравнения.Добавить("СтрелкаСреднийЧек");
	МассивЭлементовСравнения.Добавить("ИзменениеСреднийЧек");
	МассивЭлементовСравнения.Добавить("СтрелкаКоличествоПродаж");
	МассивЭлементовСравнения.Добавить("ИзменениеКоличествоПродаж");
	МассивЭлементовСравнения.Добавить("СтрелкаРентабельность");
	МассивЭлементовСравнения.Добавить("ИзменениеРентабельность");
	МассивЭлементовСравнения.Добавить("СтрелкаВаловаяПрибыль");
	МассивЭлементовСравнения.Добавить("ИзменениеВаловаяПрибыль");
	МассивЭлементовСравнения.Добавить("СтрелкаРентабельностьПрибыльность");
	МассивЭлементовСравнения.Добавить("ИзменениеРентабельностьПрибыльность");
	МассивЭлементовСравнения.Добавить("СтрелкаДебиторская");
	МассивЭлементовСравнения.Добавить("ИзменениеДебиторская");
	МассивЭлементовСравнения.Добавить("СтрелкаПросроченная");
	МассивЭлементовСравнения.Добавить("ИзменениеПросроченная");
	МассивЭлементовСравнения.Добавить("СтрелкаДоляПросроченной");
	МассивЭлементовСравнения.Добавить("ИзменениеДоляПросроченной");
	МассивЭлементовСравнения.Добавить("СтрелкаDSO");
	МассивЭлементовСравнения.Добавить("ИзменениеDSO");
	МассивЭлементовСравнения.Добавить("СтрелкаСтоимостьЗапасов");
	МассивЭлементовСравнения.Добавить("ИзменениеСтоимостьЗапасов");
	МассивЭлементовСравнения.Добавить("СтрелкаОборачиваемость");
	МассивЭлементовСравнения.Добавить("ИзменениеОборачиваемость");
	МассивЭлементовСравнения.Добавить("СтрелкаДнейЗапаса");
	МассивЭлементовСравнения.Добавить("ИзменениеДнейЗапаса");
	МассивЭлементовСравнения.Добавить("СтрелкаВыполнениеЗаказов");
	МассивЭлементовСравнения.Добавить("ИзменениеВыполнениеЗаказов");
	МассивЭлементовСравнения.Добавить("СтрелкаОтсутствиеТоваров");
	МассивЭлементовСравнения.Добавить("ИзменениеОтсутствиеТоваров");
	
	// Скрыть все элементы
	Для Каждого ИмяЭлемента Из МассивЭлементовСравнения Цикл
		ЭлементФормы = Элементы.Найти(ИмяЭлемента);
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти