&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка периода по умолчанию - текущий месяц
	НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецПериода = КонецДня(КонецМесяца(ТекущаяДата()));
	
	// Инициализация данных при открытии
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Установка заголовка формы
	Заголовок = СтрШаблон("Дашборд KPI за период с %1 по %2", 
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), 
		Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДанныеНаСервереАсинхронно();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДанныеНаСервереАсинхронно()
	
	Состояние("Обновление данных...");
	ПодключитьОбработчикОжидания("ОбновитьДанныеНаСервереОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеНаСервереОтложенно()
	
	ОбновитьДанныеНаСервере();
	Состояние();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	// Обновление данных продаж
	ОбновитьДанныеПродаж();
	
	// Обновление данных прибыльности
	ОбновитьДанныеПрибыльности();
	
	// Обновление данных взаиморасчетов
	ОбновитьДанныеВзаиморасчетов();
	
	// Обновление данных запасов
	ОбновитьДанныеЗапасов();
	
	// Обновление заголовка формы
	Заголовок = СтрШаблон("Дашборд KPI за период с %1 по %2", 
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), 
		Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПродаж()
	
	// Получение схемы компоновки данных
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Продажи");
	
	// Настройка компоновщика
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Установка параметров
	УстановитьПараметрыОтбора(КомпоновщикНастроек.Настройки);
	
	// Настройка вывода для индикаторов
	НастройкиВывода = КомпоновщикНастроек.Настройки.ВыводимыеДанные.Элементы;
	НастройкиВывода.Очистить();
	
	// Добавляем группировку по периоду для графика
	Группировка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Период");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	
	// Добавляем ресурсы
	ВыбранноеПолеВыручка = Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеВыручка.Поле = Новый ПолеКомпоновкиДанных("Выручка");
	
	ВыбранноеПолеКоличество = Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКоличество.Поле = Новый ПолеКомпоновкиДанных("КоличествоПродаж");
	
	// Выполнение компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки());
	
	// Вывод результата
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Анализ результатов и обновление индикаторов
	АнализироватьРезультатПродаж(ДокументРезультат);
	
	// Вывод графика
	РезультатПродажи = ДокументРезультат;
	
КонецПроцедуры

&НаСервере
Процедура АнализироватьРезультатПродаж(ДокументРезультат)
	
	ОбщаяВыручка = 0;
	ОбщееКоличествоПродаж = 0;
	
	// Анализ табличного документа для получения итоговых значений
	Для НомерСтроки = 1 По ДокументРезультат.ВысотаТаблицы Цикл
		
		Для НомерКолонки = 1 По ДокументРезультат.ШиринаТаблицы Цикл
			
			Область = ДокументРезультат.Область(НомерСтроки, НомерКолонки);
			
			Если Область.ИмяПараметра = "Выручка" И ТипЗнч(Область.Значение) = Тип("Число") Тогда
				ОбщаяВыручка = ОбщаяВыручка + Область.Значение;
			ИначеЕсли Область.ИмяПараметра = "КоличествоПродаж" И ТипЗнч(Область.Значение) = Тип("Число") Тогда
				ОбщееКоличествоПродаж = ОбщееКоличествоПродаж + Область.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Расчет среднего чека
	СреднийЧек = ?(ОбщееКоличествоПродаж > 0, ОбщаяВыручка / ОбщееКоличествоПродаж, 0);
	
	// Обновление индикаторов на форме
	Элементы.ИндикаторВыручка.Заголовок = Формат(ОбщаяВыручка, "ЧДЦ=2; ЧРГ=' '");
	Элементы.ИндикаторСреднийЧек.Заголовок = Формат(СреднийЧек, "ЧДЦ=2; ЧРГ=' '");
	Элементы.ИндикаторКоличествоПродаж.Заголовок = Формат(ОбщееКоличествоПродаж, "ЧЦ=10; ЧДЦ=0; ЧРГ=' '");
	
	// Установка цвета индикаторов (зеленый для положительных значений)
	Если ОбщаяВыручка > 0 Тогда
		Элементы.ИндикаторВыручка.ЦветТекста = Новый Цвет(0, 128, 0);
	Иначе
		Элементы.ИндикаторВыручка.ЦветТекста = Новый Цвет(255, 0, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПрибыльности()
	
	// Получение схемы компоновки данных
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Прибыльность");
	
	// Настройка компоновщика
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Установка параметров
	УстановитьПараметрыОтбора(КомпоновщикНастроек.Настройки);
	
	// Настройка структуры для анализа прибыльности по группам номенклатуры
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	Группировка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ГруппаНоменклатуры");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	
	// Выполнение компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки());
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	РезультатПрибыльность = ДокументРезультат;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВзаиморасчетов()
	
	// Получение схемы компоновки данных
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Взаиморасчеты");
	
	// Настройка компоновщика
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Установка параметров
	УстановитьПараметрыОтбора(КомпоновщикНастроек.Настройки);
	
	// Настройка структуры для топ дебиторов
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	Группировка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Контрагент");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	
	// Выполнение компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки());
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	РезультатВзаиморасчеты = ДокументРезультат;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЗапасов()
	
	// Получение схемы компоновки данных
	СхемаКомпоновкиДанных = Обработки.ДКП_ДашбордKPI.ПолучитьМакет("СКД_Запасы");
	
	// Настройка компоновщика
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Установка параметров
	УстановитьПараметрыОтбора(КомпоновщикНастроек.Настройки);
	
	// Настройка структуры для анализа запасов по номенклатуре
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	Группировка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	
	// Выполнение компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки());
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	РезультатЗапасы = ДокументРезультат;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыОтбора(Настройки)
	
	// Установка периода
	ПараметрНачалоПериода = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Значение = НачалоПериода;
		ПараметрНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрКонецПериода = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Значение = КонецПериода;
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли;
	
	// Установка отборов
	Если ЗначениеЗаполнено(Организация) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Контрагент", Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Менеджер) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Менеджер", Менеджер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		ДобавитьОтбор(Настройки.Отбор, "ГруппаНоменклатуры", ГруппаНоменклатуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ДобавитьОтбор(Настройки.Отбор, "Склад", Склад);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтбор(ГруппаОтбора, ИмяПоля, Значение)
	
	НовыйОтбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Значение;
	НовыйОтбор.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти